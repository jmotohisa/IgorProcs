#pragma rtGlobals=1		// Use modern global access method.#include "MaterialParameters"#include "wname"// xrd.ipf//// collection of macros for XRD analysis//// ver 0.00001 03/09/04 preliminary version// ver 0.0001  05/12/21 second preliminary version// ver 0.1		10/12/09-10	MaterialParameters.ipf incorporated, generalized// ver 0.2 : 11/11/10 calculation of surface spacing in arbitral lattice added// ver 0.21: 12/05/22 //// run init_materials() first (in MaterialParameters.ipf"Macro CalcXRDPeak_ZB(lambda, mata, matb, matsub,xcmp,hh,kk,ll)	Variable/D lambda=1.540562	String mata,matb,matsub	Variable hh=4,kk=0,ll=0	Variable/D xcmp	Prompt lambda,"X-ray wavelength (A)"	Prompt mata,"material-A ",popup,"GaAs;InP;InAs;AlAs;GaP"	Prompt matb,"materlal-B",popup,"GaAs;InP;InAs;AlAs;GaP"	Prompt matsub,"substrate (if blank, material A)",popup,"GaAs;InP;InAs;AlAs;GaP"	Prompt xcmp,"composition of material A"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Silent 1; PauseUpdate	String cmd	Variable/D aa,ca,cb,dd,hkl,theta,dTheta,csub	if(lambda<=0)		lambda=1.540562	endif	cmd="ca=param_"+mata+"[%'a0']";Execute cmd	cmd="cb=param_"+matb+"[%'a0']";Execute cmd	cmd="csub=param_"+matsub+"[%'a0']";Execute cmd	aa=(ca*xcmp+cb*(1-xcmp))	hkl=sqrt(hh*hh+kk*kk+ll*ll)	dd=aa/hkl	theta=xrdpos(lambda,csub/sqrt(hh*hh+kk*kk+ll*ll))	dTheta=xrdpos(lambda,dd)-theta	print "substrate peak position (deg)=",theta	print "relative position of alloy (sec)=",dTheta*3600EndMacro CalcXRDPeak_WZ(lambda, mata, matb, matsub,xcmp,hh,kk,ll)	Variable/D lambda=1.540562	String mata,matb,matsub	Variable hh=0,kk=0,ll=2	Variable/D xcmp	Prompt lambda,"X-ray wavelength (A)"	Prompt mata,"material-A",popup,"GaN;AlN;InN"	Prompt matb,"materlal-B",popup,"GaN;AlN;InN"	Prompt matsub,"substrate",popup,"GaN;AlN;InN"	Prompt xcmp,"composition of material A"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Silent 1; PauseUpdate	String cmd	Variable/D aa,cc,cc0,a_a,a_b,c_a,c_b,theta,dTheta,hkl,dd,a_sub,c_sub	if(lambda<=0)		lambda=1.540562	endif	cmd="a_a=param_"+mata+"[%'a0']";Execute cmd	cmd="a_b=param_"+matb+"[%'a0']";Execute cmd	cmd="c_a=param_"+mata+"[%'c0']";Execute cmd	cmd="c_b=param_"+matb+"[%'c0']";Execute cmd	cmd="a_sub=param_"+matsub+"[%'c0']";Execute cmd	cmd="c_sub=param_"+matsub+"[%'c0']";Execute cmd	aa=(a_a*xcmp+a_b*(1-xcmp))	cc=(c_a*xcmp+c_b*(1-xcmp))// only valid fro hh=kk=0//	cc0=latticeSpacingHKL(a_sub,a_sub,c_sub,90,90,120,hh,kk,ll)//	dd= latticeSpacingHKL(aa,aa,cc,90,90,120,hh,kk,ll)	cc0=latticeSpacingHKL_WZ(a_sub,c_sub,hh,kk,ll)	dd= latticeSpacingHKL_WZ(aa,cc,hh,kk,ll)	//	theta=xrdpos(lambda,cc0)	dTheta=xrdpos(lambda,dd)-theta	print "mat-A peak position (deg)=",theta	print "relative position of alloy (sec)=",dTheta*3600EndMacro CalcComposition_ZB_relaxed(lambda, mata, matb, matsub,dTheta,hh,kk,ll)	Variable/D lambda=1.540562	String mata,matb,matsub	Variable hh=4,kk=0,ll=0	Variable/D dTheta	Prompt lambda,"X-ray wavelength (A)"	Prompt mata,"material-A (base)",popup,"GaAs;InP;InAs;AlAs;GaP"	Prompt matb,"materlal-B",popup,"GaAs;InP;InAs;AlAs;GaP"	Prompt matsub,"substrate",popup,"GaAs;InP;InAs;AlAs;GaP"	Prompt dTheta,"shift from XRD peak of material-A (sec)"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Silent 1; PauseUpdate	String cmd	Variable/D aa,ca,cb,dd,hkl,theta,xcmp,csub	if(lambda<=0)		lambda=1.540562	endif	cmd="ca=param_"+mata+"[%'a0']";Execute cmd	cmd="cb=param_"+matb+"[%'a0']";Execute cmd	cmd="csub=param_"+matsub+"[%'a0']";Execute cmd	hkl=sqrt(hh*hh+kk*kk+ll*ll)	theta=xrdpos(lambda,csub/hkl)	aa=plspacing(lambda,theta+dTheta/3600)*hkl	xcmp=(cb-aa)/(cb-ca)	print "peak position of ", mata," (deg)=",theta	print "composition of ",mata," =",xcmpEnd// XRD peak posision for given plance spacing// input: lambda: X-ray wavelength//			dd: plane spacing// return: angle (deg)Function/D xrdpos(lambda,dd)	Variable/D lambda, dd	return(asin(lambda/(2*dd))*180/pi)End// XRD peak posision for given plance spacing// input: lambda: X-ray wavelength//			theta: angle (in degree)// return: lattice spacing Function/D plspacing(lambda,theta)	Variable/D lambda, theta	return(lambda/2/sin(theta/180*pi))End/////////////////////////////// data loders// load RD100 data: old version: angle is set manuallyProc LoadRD100ascdata_old(fileName,pathName,wvName,start,stop)// not complete yet	String fileName, pathName="home", wvName	Variable start=-1000,stop=1000	Prompt fileName,"file name"	Prompt pathName,"path name"	Prompt wvName,"wave name"	Prompt start,"stating angle (sec)"	Prompt stop,"stoping angle (sec)"	Silent 1; PauseUpDate	String w0,w1,w2,buffer	Variable ref,numpoints,linenumber		if (strlen(fileName)<=0)		Open /D/R/P=$pathName/T=".asc" ref		fileName= S_fileName	endif		Open/R/P=$pathName ref as fileName	lineNumber=0	do		FReadLine ref,buffer		if(strsearch(buffer,"START OF DATA",0)>=0)			break		endif		linenumber+=1	while(1)			LoadWave/G/D/N=dummy/W/L={0,linenumber+2,0,0,0}/P=$pathName fileName	if(V_flag==0)		return	endif		w0 = StringFromList(0,S_WaveNames,";")	w1 = StringFromList(1,S_WaveNames,";")// data	KillWaves $w0	SetScale/I x,start,stop,"sec",$w1	if(strlen(wvName)==0)		wvName="X"+wname(fileName)	endif	Duplicate/O $w1,$wvName	KillWaves $w1	Display $wvName	ModifyGraph log(left)=1End Macro// load RD100 data: new version: angle is set manuallyMacro LoadRD100ascdata(fileName,pathName,wvName)// not complete yet	String fileName, pathName="home", wvName	Prompt fileName,"file name"	Prompt pathName,"path name"	Prompt wvName,"wave name"	Silent 1; PauseUpDate	String w0,w1,w2,buffer	Variable ref,numpoints,linenumber	Variable start,step		if (strlen(fileName)<=0)		Open /D/R/P=$pathName/T=".asc" ref		fileName= S_fileName	endif		Open/R/P=$pathName ref as fileName	lineNumber=0	do		FReadLine ref,buffer		if(strsearch(buffer,"3rd Axis Scan Start",0)>=0)			start = str2num(StringFromList(1,buffer,":"))/10			// note: factor 1/10 presumably because 3rd Axis Units     : " x 1E-1		endif		if(strsearch(buffer,"3rd Axis Scan Step",0)>=0)			step = str2num(StringFromList(1,buffer,":"))/10		endif		if(strsearch(buffer,"START OF DATA",0)>=0)			break		endif		linenumber+=1	while(1)			LoadWave/G/D/N=dummy/W/L={0,linenumber+2,0,0,0}/P=$pathName fileName	if(V_flag==0)		return	endif		w0 = StringFromList(0,S_WaveNames,";")	w1 = StringFromList(1,S_WaveNames,";")// data	KillWaves $w0	// unit is second 	SetScale/P x,start,step,"sec",$w1	if(strlen(wvName)==0)		wvName="X"+wname(fileName)	endif	Duplicate/O $w1,$wvName	KillWaves $w1	Display $wvName	ModifyGraph log(left)=1End Macro// load Discover 8 dataMacro LoadDiscover8ascdata(fileName,pathName,wvName,conv)// not complete yet	String fileName, pathName="home", wvName	Variable conv=1	Prompt fileName,"file name"	Prompt pathName,"path name"	Prompt wvName,"wave name"	Prompt conv,"converted with ",popup,"raw2rawg;else"	Silent 1; PauseUpDate		String w0,w1,w2,buffer  	Variable ref,numpoints,linenumber	Variable start,step	String s	if(conv==1)		s="!@!YCounts"	else		s="[Data]"	Endif		if (strlen(fileName)<=0)		Open /D/R/P=$pathName/T=".txt.dat" ref		fileName= S_fileName	endif		Open/R/P=$pathName ref as fileName	lineNumber=0	do		FReadLine ref,buffer		if(strsearch(buffer,s,0)>=0)			break		endif		linenumber+=1	while(1)		LoadWave/G/D/N=dummy/W/L={0,linenumber+2,0,0,0}/P=$pathName fileName	if(V_flag==0)		return	endif		w0 = StringFromList(0,S_WaveNames,";")	w1 = StringFromList(1,S_WaveNames,";")// data	WaveStats/Q $w0	if(conv==1)		SetScale/I x,V_min/2,V_max/2,"deg",$w1 // presumably 2-theta for raw2rang conversion	else		SetScale/I x,V_min,V_max,"deg",$w1	endif			if(strlen(wvName)==0)		wvName="X"+wname(fileName)	endif	Duplicate/O $w1,$wvName	KillWaves $w1	Display $wvName	ModifyGraph log(left)=1End MacroMacro LoadGeneralXRDTextData(fileName,pathName,wvName,sunit1,sunit2)	String fileName, pathName="home", wvName	Variable sunit1=1,sunit2=1	Prompt fileName,"file name"	Prompt pathName,"path name"	Prompt wvName,"wave name"	Prompt sunit1,"theta or 2-theta ?",popup,"theta;2theta"	Prompt sunit2,"x-axis units",popup,"deg;sec"	Silent 1; PauseUpDate		Variable ref	String w0,w1,units	if (strlen(fileName)<=0)		Open /D/R/P=$pathName/T=".txt.dat" ref		fileName= S_fileName	endif		LoadWave/G/D/N=dummy/W/P=$pathName fileName	if(V_flag==0)		return	endif		w0 = StringFromList(0,S_WaveNames,";")	w1 = StringFromList(1,S_WaveNames,";")// data	WaveStats/Q $w0	if(sunit2==1)		units="deg"	else		units2="sec"	endif	if(sunit1==1)		SetScale/I x,V_min,V_max,"deg",$w1	else		SetScale/I x,V_min/2,V_max/2,"deg",$w1	endif	if(strlen(wvName)==0)		wvName="X"+wname(fileName)	endif	Duplicate/O $w1,$wvName	KillWaves $w1	Display $wvName	ModifyGraph log(left)=1End Macro// conversion routinesFunction SecToDeg(wv)	Wave wv	Variable x0,dx		if(cmpstr("deg",StringByKey("XUNITS",WaveInfo(wv,0))) != 0)		x0=DimOffset(wv,0)/3600		dx=DimDelta(wv,0)/3600		SetScale/P x, x0,dx,"deg",wv	endif		EndFunction ZeroAtPeak(wv)	Wave wv	Variable x0,dx,minlevel	string unit=StringByKey("XUNITS",WaveInfo(wv,0))	x0=DimOffset(wv,0)	dx=DimDelta(wv,0)	WaveStats/Q wv	minlevel=V_max*0.9		FindPeak/Q/M=(minlevel) wv		if(V_Flag==0)		x0=x0-V_PeakLoc		SetScale/P x, x0,dx,unit,wv	EndifEndFunction TwoTh2Th(wv)	Wave wv	Variable x0,dx	x0=DimOffset(wv,0)	dx=DimDelta(wv,0)	SetScale/P x, x0/2,dx,"deg",wvEnd////////////////////////////////////////////////////// belows are obsoleteProc XRDpeak_InGaAs(lambda,hh,kk,ll,xIn)	Variable/D lambda=1.540562	Variable hh=4,kk=0,ll=0	Variable/D xIn	Prompt lambda,"X-ray wavelength (A)"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Prompt xIn,"In composition"	Silent 1;PauseUpdate		Variable/D aGaAs=5.65330,aInAs=6.0583	Variable/D dd,theta,aa	aa=aGaAs*(1-xIn)+aInAs*xIn	dd=aa/sqrt(hh^2+kk^2+ll^2)	theta=asin(lambda/(2*dd))*pi/180	print "diffraction angle = ", theta, "(deg)"EndProc XRD_InGaAs(lambda,hh,kk,ll,dtheta)	Variable/D lambda=1.540562	Variable hh=4,kk=0,ll=0	Variable/D dTheta	Prompt lambda,"X-ray wavelength (A)"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Prompt dtheta,"delta theta (sec)"	Silent 1;PauseUpdate		Variable/D aGaAs=5.65330,aInAs=6.0583	Variable/D dd,theta,aa	dd=aGaAs/sqrt(hh^2+kk^2+ll^2)	theta=asin(lambda/(2*dd))//	print theta*180/pi	aa=sqrt(hh^2+kk^2+ll^2)/sin(theta+dtheta/3600*pi/180)*lambda/2	print "lattice constant (A)= ",aa	print "In content = ",(aa-aGaAs)/(aInAs-aGaAs)End// strain should be consideredProc XRD_InGaAs_onInP(lambda,hh,kk,ll,dtheta)	Variable/D lambda=1.540562	Variable hh=4,kk=0,ll=0	Variable/D dTheta	Prompt lambda,"X-ray wavelength (A)"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Prompt dtheta,"delta theta (sec)"	Silent 1;PauseUpdate		Variable/D aGaAs=5.65330,aInAs=6.0583,aInP=5.8688	Variable/D dd,theta,aa	dd=aInP/sqrt(hh^2+kk^2+ll^2)	theta=asin(lambda/(2*dd))//	print theta*180/pi	aa=sqrt(hh^2+kk^2+ll^2)/sin(theta+dtheta/3600*pi/180)*lambda/2	print "lattice constant (A)= ",aa	print "In content = ",(aa-aGaAs)/(aInAs-aGaAs)End// GaN AlN InN (WZ)// a 3.189 3.112 3.545 // c 5.185 4.982 5.703 // E g 3.510 6.25 0.78 // alpha 0.909 1.799 0.245 // beta 830 1462 624 // boing parameters// InGaN AlGaN AlInN//Eg 1.4 0.7 2.5//EgX 0.69 0.61 0.61 //EgL 1.84 0.80 0.80 //Psp( C/m2 ) -0.037 -0.021 -0.070 Proc XRD_InGaN(lambda,hh,kk,ll,dtheta)	Variable/D lambda=1.540562	Variable hh=4,kk=0,ll=0	Variable/D dTheta	Prompt lambda,"X-ray wavelength (A)"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Prompt dtheta,"delta theta (sec)"	Silent 1;PauseUpdate		Variable/D aGaN_c=5.185,aGaN_a=3.189,aInN_c=5.703,aInN_a=3.545	Variable/D dd,theta,aa	dd=aGaAs/sqrt(hh^2+kk^2+ll^2)	theta=asin(lambda/(2*dd))//	print theta*180/pi	aa=sqrt(hh^2+kk^2+ll^2)/sin(theta+dtheta/3600*pi/180)*lambda/2	print "lattice constant (A)= ",aa	print "In content = ",(aa-aGaAs)/0.4050EndMacro XRD_RelPosInGaAs(lambda,hh,kk,ll,xGa)	Variable/D lambda=1.540562	Variable hh=4,kk=0,ll=0	Variable/D xGa=1	Prompt lambda,"X-ray wavelength (A)"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Prompt xGa,"Ga content in GaInAs"	Silent 1;PauseUpdate		Variable aGaAs=5.65330	Variable dd,theta,theta2,aa	dd=aGaAs/sqrt(hh^2+kk^2+ll^2)	theta=asin(lambda/(2*dd))	dd=(aGaAs+(1-xGa)*0.4050)/sqrt(hh^2+kk^2+ll^2)	theta2=asin(lambda/(2*dd))//	print theta*180/pi	print theta*180/pi,theta2*180/pi,(theta-theta2)*3600*180/piEndMacro XRD_RelPosInGaAs_onInP(lambda,hh,kk,ll,xGa)	Variable/D lambda=1.540562	Variable hh=4,kk=0,ll=0	Variable/D xGa=1	Prompt lambda,"X-ray wavelength (A)"	Prompt hh"h"	Prompt kk,"k"	Prompt ll,"l"	Prompt xGa,"Ga content in GaInAs"	Silent 1;PauseUpdate		Variable aGaAs=5.65330,aInP=5.8688	Variable dd,theta,theta2,aa	dd=aInP/sqrt(hh^2+kk^2+ll^2)	theta=asin(lambda/(2*dd))	dd=(aGaAs+(1-xGa)*0.4050)/sqrt(hh^2+kk^2+ll^2)	theta2=asin(lambda/(2*dd))//	print theta*180/pi	print theta*180/pi,theta2*180/pi,(theta-theta2)*3600*180/piEndFunction LatticeSpacingHKL_GaN(hh,kk,ll)	Variable hh,kk,ll	Wave param_GaN	Return(latticeSpacingHKL_WZ(param_GaN[%'a0'],param_GaN[%'c0'],hh,kk,ll))EndFunction latticeSpacingHKL_WZ(a0,c0,hh,kk,ll)	Variable a0,c0,hh,kk,ll	Return(latticeSpacingHKL(a0,a0,c0,90,90,120,hh,kk,ll))EndFunction latticeSpacingHKL(a0,b0,c0,alpha0,beta0,gamma0,hh,kk,ll)	Variable a0,b0,c0,alpha0,beta0,gamma0,hh,kk,ll	Variable dd1,dd2,dd3,dd4	Variable ca=cos(alpha0*pi/180),cb=cos(beta0*pi/180),cg=cos(gamma0*pi/180)	dd1=det3(hh/a0,cg,cb,kk/b0,1,ca,ll/c0,ca,1)*hh/a0	dd2=det3(1,hh/a0,cb,cg,kk/b0,ca,cb,ll/c0,1)*kk/b0	dd3=det3(1,cg,hh/a0,cg,1,kk/b0,cb,ca,ll/c0)*ll/c0	dd4=det3(1,cg,cb,cg,1,ca,cb,ca,1)	return(1/sqrt((dd1+dd2+dd3)/dd4))EndFunction det3(a11,a12,a13,a21,a22,a23,a31,a32,a33)	Variable a11,a12,a13,a21,a22,a23,a31,a32,a33	return (a11*det2(a22,a23,a32,a33)-a12*det2(a21,a23,a31,a33)+a13*det2(a21,a22,a31,a32))EndFunction det2(a11,a12,a21,a22)	Variable a11,a12,a21,a22	return (a11*a22-a21*a12)End