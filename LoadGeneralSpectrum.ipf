#pragma rtGlobals=1		// Use modern global access method.// loadGeneralSpectrum.ipf//	Macro to load general spectrum data//	04/10/03 ver. 0.2 by J. Motohisa////	revision history//		before 04/10/03	ver 0.21 was part of "LoadSPEData2.ipf"//		04/10/03	ver 0.211: modified to comply with "DataSetOperation", and completely written//		16/04/29    ver 0.22: arggument added for FGraphPlot#include <Strings as Lists>#include "wname"#include "GraphPlot"#include "JMGraphStyles"#include "DataSetOperations"Macro LoadGenealSpectrum(name,file,path,flag,flag2,nmschm,which)	String name, file	String path="home", which="W"	Variable nmschm=2	Variable flag=3,flag2=3;	Prompt name,"wave name"	Prompt file,"file name"	Prompt path,"path name"	Prompt flag,"channel y data (of LIA detection) ?",popup,"yes;yes_but_skip;no"	Prompt flag2,"equal wavelength spacing ?", popup,"yes;intepolate;no"//	Prompt expnml,"normalize with exptime ?",popup,"yes;no"	Prompt nmschm,"wave naming scheme"	Prompt which,"prefix"	Silent 1; PauseUpDate	String xname,name2,w0,w1,w2,extstr	Variable ref,numpoints,wnlength	String tmpname,tmpname2//	open file dialogue to load data//	extstr = FileTypeStr()	extstr=".dat"//	print extstr	if (strlen(file)<=0)		Open /D/R/P=$path/T=(extstr) ref		file= S_fileName	endif	//	LoadWave/G/D/A/W/P=$path file	LoadWave/G/D/A/P=$path file	if(V_flag==0)		return	endif//	print S_waveNames	w0 = GetStrFromList(S_waveNames,0,";")	// wavelength	w1 = GetStrFromList(S_waveNames,1,";")	// channel x	if (flag != 3)		w2 = GetStrFromList(S_waveNames,2,";")	// channel y (only for LIA detection)	endif	if(flag == 2)		KillWaves $w2	endif//	print file,path,name,w0,w1,w2	if (flag==1)		Sort $w0, $w0, $w1,$w2		WaveStats/Q $w0		SetScale/I x,V_min,V_max,"nm",$w0,$w1,$w2	else		Sort $w0, $w0, $w1		WaveStats/Q $w0		SetScale/I x,V_min,V_max,"nm",$w0,$w1	endif	// Duplicate with a specified name	if (strlen(name)<1)		tmpname=wname(file)		if(nmschm==0) // conventional naming scheme			xname="L"+tmpname			name="W"+tmpname+"_x"			name2="W"+tmpname+"_y"		else // simplified naming schme (use only last "nmchm"-digits)			wnlength=strlen(tmpname)			tmpname2=tmpname[wnlength-nmschm,wnlength-1]			xname=which+tmpname+"_0"			name=which+tmpname+"_1"			name2=which+tmpname+"_2"		endif	else		tmpname=name		xname=tmpname+"_0"		name=tmpname+"_1"		name2=tmpname+"_2"	endif		Rename $w0,$xname	Rename $w1,$name	if(flag==1)		Rename/O $w2,$name2	endif	Duplicate/O $xname,dummyxwave0	Duplicate/O $name,dummyywave0	//* below are in the original LoadSPEdata2.ipf * ////	if(flag2==1)//		KillWaves $w0//	else if(flag2=2)//		numpoints = numpnts($w0)//		if(flag==1)//			XYtoWave2($w0,$w1,"tempx",numpoints)//			XYtoWave2($w0,$w2,"tempy",numpoints)//			KillWaves $w0,$w1,$w2//			Rename $"tempx",$w1//			Rename $"tempy",$w2//		else//			XYtoWave2($w0,$w1,"tempx",numpoints)//			KillWaves $w0,$w1,$w2//			Rename $"tempx",$w1//		endif//	endif//	waveNameL="L"+waveName//	if (strlen(waveName)<1)//		waveName="W"+wname(fileName)//		waveNameL="L"+wname(fileName)//	endif//	print waveName//	if(flag==1)//		w0=waveName+"_y"//		waveName = waveName + "_x"//		Rename $w1,$waveName//		Rename $w2,$w0//	else//		Rename $w1,$waveName//	endif	//	Duplicate/O $waveName,dummywave0//	if(flag2==2)//		Duplicate/O $waveName,dummyxwave//		Duplicate/O $waveNameL,dummyywave		//	endifEnd Macro//(name,file,path,flag,flag2,nmschm,which)Macro MultiGenealSpectrumLoad(thePath, expnml,nmschm,which,dsetnm,flag,flag2,wantToPrint)	String thePath="_New Path_",which="W",dsetnm="data"	Variable expnml=1,nmschm=2,wantToPrint=2	Variable flag=3,flag2=3//	Prompt thePath, "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	Prompt expnml,"normalize with exptime ?",popup,"yes;no"	Prompt nmschm,"wave naming scheme"	Prompt which,"wave prefix"	Prompt dsetnm, "prefix for dataset name"	Prompt flag,"channel y data (of LIA detection) ?",popup,"yes;yes_but_skip;no"	Prompt flag2,"equal wavelength spacing ?", popup,"yes;intepolate;no"	Prompt wantToPrint, "Do you want to print graphs?", popup, "Yes;No"//	Prompt flag,"swap wavelength ?",popup,"no;yes"	PauseUpdate;Silent 1		String fileName,ftype	Variable fileIndex=0, gotFile	String name,nametmp	Variable wnlength,filenum=0// create data set	InitDataSetOperations(dsetnm)	CreateDataset0(0,1)	dsetnm=dsetnm+num2istr(g_dsetindex-1)	//	Make/N=1/T/O ExpDate; Make/N=2000/D/O Expostime; //	ftype=FileTypeStr()	ftype=".dat"	if (CmpStr(thePath, "_New Path_") == 0)		// user selected new path ?		NewPath/O data			// this brings up dialog and creates or overwrites path		thePath = "data"	endif		DoWindow /F gGraphPlotxy							// make sure Graphplot is front window	if (V_flag == 0)								// Graphplot does not exist?		Make/N=2/D/O dummyxwave0		Make/N=2/D/O dummyywave0		FGraphPlotxy("nm","counts")									// create it		DoWindow/C gGraphPlotxy	endif// load spectrum	do		fileName = IndexedFile($thePath,fileIndex,ftype)			// get name of next file in path//		print fileName		gotFile = CmpStr(fileName, "")		if (gotFile)//			SPEload2("",fileName,thePath,expnml,0)	// load with old wave naming scheme			nametmp=wname(fileName)			wnlength=strlen(nametmp)			name=which+nametmp[wnlength-nmschm,wnlength-1]			LoadGenealSpectrum(name,fileName,thePath,flag,flag2,nmschm,which)//Macro LoadGenealSpectrum(name,file,path,flag,flag2,nmschm,which)			Textbox/C/N=tb_file/F=0/A=MT/X=-30/Y=5 "File: "+fileName			DoUpdate	// make sure graph updated before printing			if (wantToPrint == 1)				PrintGraphs/R Graphplot(2, 2, 98, 98)/F=1	// print graph			endif			$dsetnm(filenum)=name			filenum +=1		endif		fileIndex += 1	while (gotFile)									// until TextFile runs out of files	Redimension/N=(filenum) $dsetnm	DisplayDataSetTable(dsetnm)EndMacro