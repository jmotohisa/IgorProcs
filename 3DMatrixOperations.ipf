#pragma rtGlobals=1		// Use modern global access method.#include <3DWaveDisplay>#include "JEG Color Legend" // requires Jonathon Geyer's "JEG Tools"#include "wname"// 3DMatrixOperations.ipf by J. Motohisa//	some macro to work with 3D-matrix wave ////	revision history//		16/03/06	ver 0.1a	merged with MatrixOperations3D2.ipf//		14/04/15	ver 0.03	"transpose" is modified in Wave2Dto3D //		11/03/20	ver 0.02b	some Macros are converted to functions//		11/03/18	ver 0.02	merged with "MatrixOperations3D.ipf"//		08/04/19	ver 0.01	preliminary developing version // revision in MatrixOperations3D// ver 0.1	09/03/15// ver 0.11 09/09/22-23// create 3D matrix wave from multiple 2D matrix waveMacro MatrixWavesTo3DMatrixWave(wvnm,prefix,mode,nstart,nend,nskip,ftrans)	String wvnm,prefix="M"	Variable mode=1	Variable nstart=0,nend=1,nskip=1,ftrans=1	Prompt wvnm, "Destnation wave"	Prompt prefix,"Prefix for targate wave name"	Prompt mode,"2D matrix wave search mode",popup,"number list;prefix only"	Prompt nstart,"Starting index"	Prompt nend,"Ending index"	Prompt nskip,"skip number"	Prompt ftrans,"tranpose ?",popup,"yes;no"	PauseUpdate;Silent 1		String wv,wvlist	Variable nx,ny,npoint,i,i2	wvlist = WaveList(prefix+"*",";","DIMS:2")	if(mode==1)		wv=prefix+num2istr(nstart)		nx=(nend-nstart)/nskip	else		wv=StringFromList(nstart,wvlist)		nx = floor(ItemsInList(wvlist,";")/nskip)	endif	ny=dimsize($wv,1)	npoint=dimsize($wv,0)//	print nx,ny,npoint	if(ftrans==1)		Make/O/D/N=(nx,ny,npoint) $wvnm	else		Make/O/D/N=(nx,npoint,ny) $wvnm	endif	i=nstart	i2=0	do		if(mode==1)			wv=prefix+num2istr(i)		else			wv=StringFromList(i-1,wvlist)		endif		if(WaveExists($wv)==0)			break;		endif		print wv		if(ftrans==1)			MatrixTranspose $wv		endif		$wvnm[i2][][]=$wv[q][r]		i+=nskip		i2+=1		if(ftrans==1)			MatrixTranspose $wv		endif	while(i<nend)EndMacro WavesToMatrix3D(wname,matwName,startindex,ncol1,ncol2,skip)// Converto multiple waves into a single matrix wave//	String wname	String matwName	Variable ncol1,ncol2,startindex=0,skip=1	Prompt wname, "Enter String that begin with"//,popup,WaveList("*",";","")	Prompt matwName,"Enter Destination Matrix Wave Name"	Prompt startindex,"starting index"	Prompt ncol1,"Number of Waves y"	Prompt ncol2,"Number of waves z"		Silent 1; PauseUpDate	Variable nrow		Variable index=0,index1,index2	String wn		wn=wname+num2istr(startindex)	nrow = numpnts($wn)		if(WaveExists($matwName)==0)//		Make/D/N=(nrow,ncol1,ncol2) $matwName		Make/D/N=(ncol1,ncol2,nrow) $matwName	else//		Redimension /N=(nrow,ncol1,ncol2) $matwName		Redimension /N=(ncol1,ncol2,nrow) $matwName	endif		index1=0	do		index2=0		do			index=startindex+index2+index1*ncol2//			print nn			wn = wname +num2str(index)			if(strlen(wn)==0)				break			endif//			print wn;//			$matwName[][index1][index2]=$wn[p]			$matwName[index1][index2][]=$wn[r]			index2+=skip		while(index2<ncol2)		index1+=1	while(index1<ncol1)End Macro////// split row of 2D wave and convert to 3D wave // opr: type of data storage of original wave// 1: number of columns(y)=ny, number of rows (x) nx*nz (nx data times nz)// 2:  number of columns(y)=nx,number of rows (x) ny*nz (ny data times nz)// 3:  number of columns(y)=nx,number of rows (x) ny*nz (ny data times nz) with z reversed// 4:  number of columns(y)=nx,number of rows (x) ny*nz (ny data times nz) with z reversedFunction Wave2Dto3D(orig,dest,numlayer,opr)	String orig,dest	Variable numlayer,opr	PauseUpdate; silent 1		Variable nx,ny,nz,i,j,k,l	Wave ow=$orig	nz=numlayer	if(opr==1 || opr==3)		nx=DimSize(ow,0)/nz		ny=DimSize(ow,1)	else		nx=DimSize(ow,1)		ny=DimSize(ow,0)/nz	endif	print nx,ny,nz	Make/O/N=(nx,ny,nz) $dest	Wave dw=$dest	switch(opr)	case 1:		k=0		do			j=0			do				dw[j][][k]=ow[j+k*nx][q]				j+=1			while(j<nx)			k+=1		while(k<nz)		break	case 2:		k=0		do			j=0			do				l=j+k*ny				dw[][j][k]=ow[l][p]				j+=1			while(j<ny)			k+=1		while(k<nz)		break	case 3:		k=0		do			j=0			do				dw[j][][nz-k-1]=ow[j+k*nx][q]				j+=1			while(j<nx)			k+=1		while(k<nz)		break;	case 4:		k=0		do			j=0			do				l=j+k*ny				dw[][j][nz-k-1]=ow[l][p]				j+=1			while(j<ny)			k+=1		while(k<nz)		break;	endswitchEnd MacroMacro WavesInAGraphToMatrix3D(graphname,matwname,ncol1)	String graphname,matwname	Variable ncol1=1	Prompt graphname,"Graph Name",popup,WinList("*",";","WIN:1")	prompt matwname,"name of Destination Matrix"	PauseUpdate;Silent 1	String wlist=TraceNameList(graphname,";",1),wn	Variable index=0,index1,nrow,ncol,nn	wn=StringFromList(index,wlist,";")		nrow=numpnts($wn)	ncol=ItemsInList(wlist)/ncol1	if(WaveExists($matwName)==0)		Make/D/N=(nrow,ncol1,ncol) $matwName	else		Redimension /N=(nrow,ncol1,ncol) $matwName	endif	do		index1=0		do			nn=index1+index*ncol//			print nn			wn=StringFromList(nn,wlist,";")				if(strlen(wn)==0)				break			endif			$matwName[][index][index1]=$wn[p]			index1+=1		while(index1<ncol)		index+=1	while(index<ncol1)End///////////////////// 3D wave to 2D waveMacro Slice3DMatrixWave(wvname,il,num,grname,tempwvnm)	String wvname,grname,tempwvnm	Variable il=1,num	Prompt wvname,"3D Matrix Wave Name",popup,WaveList("*",";","DIMS:3")	prompt num,"number"	prompt il,"row/column/layer ?",popup,"row;column;layer"	prompt grname, "Graph name"	prompt tempwvnm,"destination wave name"	PauseUpdate;Silent 1		String tempwvnm2	tempwvnm2=Slice3DMatrixWaveFunc(wvname,il,num,tempwvnm)//	Wave ww=$wvname,tw=$tempwvnm	if(strlen(WinList(grname,";",""))==0)		Display /W=(588,192,1039,622)		AppendImage $tempwvnm2//		ModifyGraph height={Aspect,1}	else		DoWindow/F gname	endifEndFunction/S Slice3DMatrixWaveFunc(wvname,il,num,tempwvnm)	String wvname,tempwvnm	Variable il,num	Variable zz,namelen,nx,ny,nl,dx,dy,dl,x0,y0,l0	Variable n1,n2	String xname,suffix	String unitx,unity,unitl		nx=DimSize($wvname,0)	ny=DimSize($wvname,1)	nl=DimSize($wvname,2)	dx=DimDelta($wvname,0)	dy=DimDelta($wvname,1)	dl=DimDelta($wvname,2)	x0=DimOffset($wvname,0)	y0=DimOffset($wvname,1)	l0=DimOffset($wvname,2)	unitx=WaveUnits($wvname,0)	unity=WaveUnits($wvname,1)	unitl=WaveUnits($wvname,2)	switch (il)		case 1:			n1 = ny			n2 = nl			sprintf suffix,"_x%d",num			break		case 2:			n1=nx			n2=nl			sprintf suffix,"_y%d",num			break		case 3:			n1=nx			n2=ny			sprintf suffix,"_z%d",num			break	endswitch		if(strlen(tempwvnm)==0)//		tempwvnm=wvname+"_slice"		tempwvnm=wvname+suffix	endif		if(WaveExists($tempwvnm)==0)		Make/D/N=(n1,n2) $tempwvnm	else		Redimension/N=(n1,n2) $tempwvnm	endif		Wave ww=$wvname,tw=$tempwvnm	if(il==1)		tw=ww[num][p][q]		SetScale/P x y0,dy,unity,tw		SetScale/P y l0,dl,unitl,tw	else		if(il==2)			tw = ww[p][num][q]			SetScale/P x x0,dx,unitx,tw			SetScale/P y l0,dl,unitl,tw		else			tw=ww[p][q][num]			SetScale/P x x0,dx,unitx,tw			SetScale/P y y0,dy,unity,tw		endif	endif	return(tempwvnm)End// Slicer is OBSOLETE//Proc DisplaySlicer(name)//	String name//	Prompt name,"wave name for slicer",popup,wavelist("M*",";","DIMS:3")//	PauseUpdate; Silent 1//	//	CreateSlicer//	ModifySlicer srcWave=$name//	ModifySlicer update=0//	ModifySlicer NewWidthSlice=0.5,NewLengthSlice=0.5,NewHeightSlice=0.5//	ModifySlicer CurSliceScaling=1//	ModifySlicer update=3//End Macro///////////////// 3D wave to 1DMacro Thread3DMatrixWave(wvname,il,num1,num2,grname,tempwvnm)	String wvname,grname,tempwvnm	Variable il=1,num1,num2	Prompt wvname,"3D Matrix Wave Name",popup,WaveList("*",";","DIMS:3")	prompt num1,"number #1"	prompt num2,"number #2"	prompt il,"thread row/column/layer ?",popup,"row;column;layer"	prompt grname, "Graph name"	prompt tempwvnm,"destination wave name"	PauseUpdate;Silent 1		Thread3DMatrixWaveFunc(wvname,il,num1,num2,grname,tempwvnm)EndFunction Thread3DMatrixWaveFunc(wvname,il,num1,num2,grname,tempwvnm)	String wvname,grname,tempwvnm	Variable il,num1,num2	Variable nx,dx,x0	String suffix,unitx	Wave ww=$wvname	suffix=""	switch (il)		case 1:			sprintf suffix,"_y%dz%d",num1,num2			break		case 2:			sprintf suffix,"_x%dz%d",num1,num2			break		case 3:			sprintf suffix,"_x%dy%d",num1,num2			break	endswitch		nx=DimSize(ww,il-1)	dx=DimDelta(ww,il-1)	x0=DimOffset(ww,il-1)	unitx=WaveUnits(ww,il-1)		if(strlen(tempwvnm)==0)//		tempwvnm=wvname+"_thread"		tempwvnm=wvname+suffix	endif		if(WaveExists($tempwvnm)==0)		Make/D/N=(nx) $tempwvnm	else		Redimension/N=(nx) $tempwvnm	endif	Wave tw=$tempwvnm		if(il==1)		tw=ww[p][num1][num2]	else		if(il==2)			tw= ww[num1][p][num2]		else			tw=ww[num1][num2][p]		endif	endif	SetScale/P x x0,dx,unitx,tw	if(strlen(WinList(grname,";",""))==0)		Display /W=(588,192,1039,622) tw		if(strlen(grname)!=0)			DoWindow/C $grname		Endif	else		DoWindow/F $grname		if(stringmatch(WaveList("*",";","WIN:"+grname),NameOfWave(tw))==0)			AppendToGraph tw		Endif	endifEnd/////// load 3D waveProc LoadMatrixWave3D0(wvname,filename,pathName,ny,scaleflag,startflag,transpose)	String wvname,filename,pathName="home"	Variable ny=1,scaleflag=1,startflag,transpose=2	Prompt ny,"ny"	Prompt scaleflag,"read scaling delta x, y and z ?",popup,"yes;no"	Prompt startflag,"read x0, y0, and z0 values ?",popup,"yes;no"	Prompt transpose,"Transpose x and y ?",popup,"yes;no"		Silent 1; PauseUpDate	String/G g_wvname,g_filename,g_pathname	Variable ref,deltax,deltay,deltaz,x0,y0,z0,skips	Variable nx,ny0,nz,i,j,k,l,numlines	String w0,buffer		if (strlen(fileName)<=0)		Open /D/R/P=$pathName/T="sGBWTEXT.dat" ref		fileName= S_fileName	endif	print fileName	//	if(scaleflag==1)//		Open /R/P=$pathName/T="sGBWTEXT" ref as fileName//		FReadLine ref,buffer//		deltax = str2num(StringFromList(0,buffer,"\t"))//		deltay = str2num(StringFromList(1,buffer,"\t"))//		Close ref//	endif// read scaling information	Open /R/P=$pathName/T="sGBWTEXT.dat" ref as fileName	if(scaleflag==1)		FReadLine ref,buffer		deltax = str2num(StringFromList(0,buffer,"\t"))		deltay = str2num(StringFromList(1,buffer,"\t"))		deltaz = str2num(StringFromList(2,buffer,"\t"))	else		deltax=1		deltay=1		deltaz=1	endif	if(startflag==1)		FReadLine ref,buffer		x0 = str2num(StringFromList(0,buffer,"\t"))		y0 = str2num(StringFromList(1,buffer,"\t"))		z0 = str2num(StringFromList(2,buffer,"\t"))	else		x0=0		y0=0		z0=0	endif	Close ref	skips=(2-scaleflag)+(2-startflag)		numlines=skips+ny	i=0	do		LoadWave/Q/G/M/D/N=dummy/L={0,(skips),(numlines),0,0}/P=$pathName filename		if(V_flag==0)			return		endif		w0 = StringFromList(0,S_waveNames,";")		if(i==0)			if (strlen(wvname)<1)				wvname="M"+wname(fileName)			endif			nx=DimSize($w0,0)			if(transpose==1)				Make/O/N=(ny,nx) $wvname			else				Make/O/N=(nx,ny) $wvname			endif		else			if(transpose==1)				Redimension/N=(ny,nx,i+1) $wvname			else				Redimension/N=(nx,ny,i+1) $wvname			endif		endif			if(transpose==1)				MatrixTranpose $w0				$wvname[][][i]=$w0			else				$wvname[][][i]=$w0			endif		numlines+=ny		i+=1		print i	while(1)		if(scaleflag==1)		SetScale/P x x0,deltax,"m", $wvname		SetScale/P y y0,deltay,"m", $wvname		SetScale/P z z0,deltaz,"m", $wvname	endif//	if(transpose==1)//		MatrixTranspose $wvname//	endif		g_pathname=pathname	g_filename=filename	g_wvname=wvnameEnd ProcFunction FLoadMatrixWave3D(wvname,filename,pathName,numlayer,scaleflag,startflag,opr)	String wvname,filename,pathName	Variable numlayer,scaleflag,startflag,opr		String/G g_wvname,g_filename,g_pathname	Variable ref,deltax,deltay,deltaz,x0,y0,z0,skips	Variable nx,ny,nz,i,j,k,l	String w0,buffer		if (strlen(fileName)<=0)		Open /D/R/P=$pathName/T="sGBWTEXT.dat" ref		fileName= S_fileName	endif	print fileName	// read scaling information	Open /R/P=$pathName/T="sGBWTEXT.dat" ref as fileName	if(scaleflag==1)		FReadLine ref,buffer		deltax = str2num(StringFromList(0,buffer,"\t"))		deltay = str2num(StringFromList(1,buffer,"\t"))		deltaz = str2num(StringFromList(2,buffer,"\t"))	else		deltax=1		deltay=1		deltaz=1	endif	if(startflag==1)		FReadLine ref,buffer		x0 = str2num(StringFromList(0,buffer,"\t"))		y0 = str2num(StringFromList(1,buffer,"\t"))		z0 = str2num(StringFromList(2,buffer,"\t"))	else		x0=0		y0=0		z0=0	endif	Close ref	skips=(2-scaleflag)+(2-startflag)		LoadWave/G/M/D/N=dummy/L={0,(skips),0,0,0}/P=$pathName filename		if(V_flag==0)		return(0)	endif	w0 = StringFromList(0,S_waveNames,";")	if (strlen(wvname)<1)		wvname="M"+wname(fileName)	endif		Wave2Dto3D(w0,wvname,numlayer,opr)	if(scaleflag==1)		SetScale/P x x0,deltax,"m", $wvname		SetScale/P y y0,deltay,"m", $wvname		SetScale/P z z0,deltaz,"m", $wvname	endif	g_pathname=pathname	g_filename=filename	g_wvname=wvname	EndMacro LoadMatrixWave3D(wvname,filename,pathName,numlayer,scaleflag,startflag,opr)	String wvname,filename,pathName="home"	Variable numlayer=2,scaleflag=2,startflag,opr=1	Prompt numlayer,"number of layers (z)"	Prompt scaleflag,"read scaling delta x, y and z ?",popup,"yes;no"	Prompt startflag,"read x0, y0, and z0 values ?",popup,"yes;no"	Prompt opr,"column and row order ",popup,"(y,xz);(x,yz);(y,x-z);(x,y-z)"		Silent 1; PauseUpDate	FLoadMatrixWave3D(wvname,filename,pathName,numlayer,scaleflag,startflag,opr)End ProcMacro init3Sliders()	PauseUpdate Silent 1;	WM_init3Sliders()End//Macro LoadMatrixBinaryWave(dest,path,file,sizex,sizey,skip,format1,format2)	String path,file,dest	Variable sizex=640,sizey=480,format1=16,format2=4,skip=0//	Prompt format1,"data type",popup,"single;double;32bit_singed;16bit_signed;8bit_signed;32bit_unsinged;16bit_unsigned;8bit_unsigned"	PauseUpdate; Silent 1		Variable ref		if (strlen(file)<=0)		Open /D/R/T="????"/P=$path ref		file= S_fileName	endif	print file	Variable fType=16,wType=4	GBLoadWave/O/Q/P=$path/S=(skip)/T={fType,wType}/W=(sizey)/U=(sizex) file	if (strlen(dest)<1)		dest="M"+wname(fileName)	endif	WavesToMatrix("wave",dest,0,sizey,1)End MacroMacro MultiLoadMatrixWave(thePath,scaleflag,startflag,transpose)	String thePath="_New Path_"	Variable scaleflag = 1,transpose=1,startflag=1	Prompt thePath, "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	Prompt scaleflag,"read scaling delta x and y ?",popup,"yes;no"	Prompt startflag,"read x0 and y0 values ?",popup,"yes;no"	Prompt transpose,"Transpose x and y ?",popup,"yes;no"	String ftype="TEXT"		Silent 1		String fileName	Variable fileIndex=0, gotFile		if (CmpStr(thePath, "_New Path_") == 0)		// user selected new path ?		NewPath/O data			// this brings up dialog and creates or overwrites path		thePath = "data"	endif		do		fileName = IndexedFile($thePath,fileIndex,ftype)			// get name of next file in path		gotFile = CmpStr(fileName, "")		if (gotFile)//			LoadMatrixWave("",filename,thePath,scaleflag,startflag,transpose)			FLoadMatrixWave3D(wvname,filename,thePath,numlayer,scaleflag,startflag,opr)		endif		fileIndex += 1	while (gotFile)									// until TextFile runs out of filesEnd MacroMacro MultiLoadMatrixWave2(thePath,prefix,scaleflag,startflag,transpose)	String prefix,thePath="_New Path_"	Variable scaleflag = 1,transpose=1,startflag=1	Prompt thePath, "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	prompt prefix,"prefix for file names"	Prompt scaleflag,"read scaling delta x and y ?",popup,"yes;no"	Prompt startflag,"read x0 and y0 values ?",popup,"yes;no"	Prompt transpose,"Transpose x and y ?",popup,"yes;no"	String ftype="TEXT"		Silent 1		String fileName	Variable fileIndex=0, gotFile,prefixmatch		if (CmpStr(thePath, "_New Path_") == 0)		// user selected new path ?		NewPath/O data			// this brings up dialog and creates or overwrites path		thePath = "data"	endif		do		fileName = IndexedFile($thePath,fileIndex,ftype)			// get name of next file in path		gotFile = CmpStr(fileName, "")		prefixmatch=strsearch(filename,prefix,0)		if (gotFile && prefixmatch==0)			LoadMatrixWave("",filename,thePath,scaleflag,startflag,transpose)		endif		fileIndex += 1	while (gotFile)									// until TextFile runs out of filesEnd MacroMacro LoadColumnDataToMatrix(wvname,filename,pathName,icol,ndata,transpose)	String wvname="M",filename,pathName="home"	Variable icol=2,ndata=1,transpose=2	Prompt icol,"Column number to load ?"	Prompt ndata,"number of data in one row"	Prompt transpose,"Transpose x and y ?",popup,"yes;no"		Silent 1; PauseUpDate	Variable ref,deltax,deltay,x0,y0,skips,index,nskip,nrow	String wn,buffer,extstr//	open file dialogue to load data//	extstr = FileTypeStr()	extstr=".dat"	if (strlen(fileName)<=0)//		Open /D/R/P=$pathName/T="sGBWTEXT" ref		Open /D/R/T=(extstr) ref		fileName= S_fileName	endif	print fileName		LoadWave/J/D/O/K=0/V={"\t, "," $",0,0}/N=dummy/L={0,0,0,icol,1}/Q/P=$pathName fileName//	LoadWave/G/D/O/K=0/V={"\t, "," $",0,0}/N=dummy/L={0,0,0,icol,1}/Q/P=$pathName fileName // might be better ?	wn = StringFromList(0,S_waveNames,";")	Duplicate $wn,$wvname	nrow=numpnts($wvname)/ndata	Redimension/N=(ndata,nrow) $wvname	if(transpose==1)		MatrixTranspose $wvname	endifEnd MacroMacro WavesToMatrix(wvname,matwName,startindex,ncol,skip)// Converto multiple waves into a single matrix wave//	String wvname	String matwName	Variable ncol,startindex,skip=1	Prompt wvname, "Enter String that begin with"//,popup,WaveList("*",";","")	Prompt matwName,"Enter Destination Matrix Wave Name"	Prompt startindex,"starting index"	Prompt ncol,"Number of Waves"		Silent 1; PauseUpDate	Variable nrow		Variable index=0,index1=startindex	String wn		wn=wvname+num2istr(index1)	nrow = numpnts($wn)	if(WaveExists($matwName)==0)		Duplicate $wn,$matwName	endif	Redimension /N=(nrow,ncol) $matwName	do		wn = wvname +num2str(index1)//		print wn		if(WaveExists($wn)==0)			break		endif		$matwName[][index] = $wn[p]		index += 1		index1+=skip	while(index<ncol)End MacroMacro WavesInAGraphToMatrix(graphname,matwname)	String graphname,matwname	Prompt graphname,"Graph Name",popup,WinList("*",";","WIN:1")	prompt matwname,"name of Destination Matrix"	PauseUpdate;Silent 1	String wlist=TraceNameList(graphname,";",1),wn	Variable index=0,index1,nrow,ncol	wn=GetStrFromList(wlist,index,";")	nrow=numpnts($wn)	ncol=ItemsInList(wlist)	if(WaveExists($matwName)==0)		Duplicate $wn,$matwName		Redimension /N=(nrow,ncol) $matwName	endif	index+=1	do		wn=GetStrFromList(wlist,index,";")		if(strlen(wn)==0)			break		endif		$matwName[][index]=$wn[p]		index+=1	while(1)End Macro		Macro MatrixWavePlot(matwname,newplot,axis)	String matwname	Variable newplot=1,axis=1	Prompt matwname,"matrix wave name",popup,WaveLIst("*",";","DIMS:2")	Prompt newplot,"display or append",popup,"display;append"	Prompt axis,"axis",popup,"left;right"	PauseUpdate;Silent 1		Variable nplot,i=0	nplot =DimSize($matwname,1)	if(newplot==1)		Display	endif	Do		if(axis==1)			Append $matwname[][i]		else			Append/R $matwname[][i]		endif		i+=1	while(i<nplot)End MacroMacro MatrixToWaves(Mat,index)// Convert the indexed column of a single matrix wave into a wave//	String Mat	Variable index	prompt Mat,"input the desired matrix",popup,"_none_;"+WaveList("*",";","DIMS:2")	Prompt index,"column index"	Silent 1; PauseUpdate	Variable nrs=DimSize($Mat,0),ncs=DimSize($Mat,1)	if(index<ncs)		Make/O/N=(nrs) $(Mat+"_"+num2str(Index))		CopyScales $Mat,$(Mat+"_"+num2str(Index))		$(Mat+"_"+num2str(Index))[] = $Mat[p][Index]	endifEndMacro MatrixAllToWaves(Mat)// Convert a single matrix wave into multiple waves//	String Mat	prompt Mat,"input the desired matrix",popup,"_none_;"+WaveList("*",";","DIMS:2")	Silent 1; PauseUpdate	Variable nrs=DimSize($Mat,0),ncs=DimSize($Mat,1)	Variable lrs=DimOffset($Mat,0),lcs=DimOffset($Mat,1)	Variable Index=0//	print nrs,ncs,lrs,lcs	do		Make/O/N=(nrs) $(Mat+"_"+num2str(Index))		CopyScales $Mat,$(Mat+"_"+num2str(Index))		$(Mat+"_"+num2str(Index))[] = $Mat[p][Index]		Index += 1	while (Index < ncs)EndProc PlotMatrix(Mat)	String Mat	Prompt Mat, "choose the matrix",popup,WaveList("*Mat",";","")	Silent 1; PauseUpdate	MatrixAllToWaves(Mat)	String wvname,GraphTitle	GraphTitle = "Graph_of_"+Mat	Variable Index = 1	wvname = Mat+"_0"	Display $wvname as GraphTitle	DoWindow/C $GraphTitle	do		wvname = Mat+"_"+num2str(Index)		if (WaveExists($wvname) == 1)			AppendToGraph $wvname		else			break		endif		Index += 1	while (1)EndMacro PlotMatrixSingleX(Mat,index)	String Mat	Variable index=0	Prompt Mat, "choose the matrix",popup,WaveList("*",";","DIMS:2")	Prompt index,"column number to plot"	Silent 1; PauseUpdate	String wn1,wn2	String GraphTitle	MatrixToWaves(Mat,index)	wn1 = Mat+"_"+num2str(index)	wn2 = Mat+"_x"+num2str(index)	print wn1,wn2	Rename $wn1,$wn2	GraphTitle = "Graph_of_"+Mat	Display $wn2EndMacro PlotMatrixSingleY(Mat,index)	String Mat	Variable index=0	Prompt Mat, "choose the matrix",popup,WaveList("*",";","DIMS:2")	Prompt index,"column number to plot"	Silent 1; PauseUpdate		String wvname,GraphTitle,wn1,wn2	MatrixTranspose $Mat	MatrixToWaves(Mat,index)	MatrixTranspose $Mat	wn1 = Mat+"_"+num2str(index)	wn2 = Mat+"_y"+num2str(index)	Rename $wn1,$wn2	GraphTitle = "Graph_of_"+Mat	Display $wn2EndMacro NormalizeMatXY(Mat,xy)	String Mat	Variable xy=1	Prompt Mat "Input matrix",popup,WaveList("*",";","DIMS:2")	Prompt xy,"x or y",popup,"x;y"	Silent 1;PauseUpdate	String cmd,Mat2		cmd="WaveStats/Q temp_wave;temp_wave/=V_max;"	if(xy==1)		Mat2=Mat+"_xnrm"		XYProc(Mat,Mat2,cmd,"x",0)	else		Mat2=Mat+"_ynrm"		XYProc(Mat,Mat2,cmd,"y",0)	endifEndMacro SmoothMat(Mat,xy)	String Mat	Variable xy=1	Prompt Mat "Input matrix",popup,WaveList("*",";","DIMS:2")	Prompt xy,"x or y",popup,"x;y"	Silent 1;PauseUpdate		String Mat2,cmd="Smooth 1, "	if(xy==1)		Mat2=Mat+"_xsm"		XYProc(Mat,Mat2,cmd,"x",1)	else		Mat2=Mat+"_ysm"		XYProc(Mat,Mat2,cmd,"y",1)	endifEndMacro DiffXMat(Mat)	String Mat	prompt Mat,"input the desired matrix",popup,WaveList("*",";","DIMS:2")	Silent 1;PauseUpdate		String MatDiff = Mat +"_xdiff",cmd="Differentiate"	XYProc(Mat,MatDiff,cmd,"x",1)End MacroMacro DiffYMat(Mat)	String Mat	prompt Mat,"Input the desired matrix",popup,WaveList("*",";","DIMS:2")	Silent 1;PauseUpdate		String MatDiff = Mat +"_ydiff",cmd="Differentiate"	XYProc(Mat,MatDiff,cmd,"y",1)End MacroProc XYProc(wvorig,wvdest,cmd,xy,oprflag)	String wvorig,wvdest,cmd,xy	Variable oprflag // if oprflag=1, add wavename at the end of "cmd"	Silent 1;PauseUpdate		Variable nrs,ncs,Index=0	String cmd0//	print wvorig,wvdest	if(strlen(wvdest)==0)		$wvdest=$wvorig	else		Duplicate/O $wvorig,$wvdest	endif	if(stringmatch(LowerStr(xy), "y"))		MatrixTranspose $wvdest	endif	nrs=DimSize($wvdest,0)	ncs=DimSize($wvdest,1)	Make/O/N=(nrs) temp_wave	do		CopyScales $wvdest,temp_wave		temp_wave[] = $wvdest[p][Index]		if(oprflag==1)			cmd0=cmd+" temp_wave"		else			cmd0=cmd		endif//		print cmd//		print cmd0		Execute cmd0		$wvdest[][Index] = temp_wave[p]		Index += 1	while (Index < ncs)	KillWaves temp_wave		if(stringmatch(LowerStr(xy), "y"))		MatrixTranspose $wvdest	endifEndFunction/D AreaAllMatrix(MMat)	Wave MMat//	prompt MMat,"input the desired matrix",popup,WaveList("*",";","DIMS:2")		Silent 1;PauseUpdate	Variable nrs=DimSize(MMat,0),ncs=DimSize(MMat,1),Index=0	Variable/D res=0	Make/O/N=(nrs) temp_wave	do		CopyScales MMat,temp_wave		temp_wave[] = MMat[p][Index]		res +=area(temp_wave,-Inf,Inf)		Index += 1	while (Index < ncs)//	print "results = ",res*DimDelta($MMat,1)	KillWaves temp_wave	return res*DimDelta(MMat,1)End FunctionMacro MakeMeshDataForNonUnifMesh(orig,dest)	String orig,dest	Prompt orig,"original wave for nonuniform mesh"	Prompt dest,"Destination wave for nonuniform mesh"	PauseUpdate;Silent 1		Variable n,i	n=DimSize($orig,0)	Make/N=(n+1)/D/O $dest	$dest[0]=$orig[0]	i=1	do		$dest[i]=($orig[i-1]+$orig[i])/2		i+=1	while(i<n)	$dest[n]=$orig[n-1]EndMacro IntegrateWaveX(wvname,dest,xstart,xend)	String wvname,dest	Variable xstart,xend	Prompt wvname,"wave name",popup,WaveLIst("*",";","DIMS:2")	Prompt dest,"destination wave name"	Prompt xstart,"start"	Prompt xend,"end"	PauseUpdate;Silent 1		Variable nx,ny,i	String temp="t_"+dest	nx=DimSize($wvname,0)	ny=DimSize($wvname,1)	Duplicate $wvname,$temp	Duplicate/O $wvname,$dest	Redimension/N=(nx) $temp	MatrixTranspose $dest	Redimension/N=(ny) $dest	i=0	do		$temp=$wvname[p][i]		if(xstart==0&&xend==0)			$dest[i]=area($temp)		else			$dest[i]=area($temp,xstart,xend)		Endif		i+=1	while(i<ny)	KillWaves $temp//	$dest = area($wvname,xstart,xend)EndMacro IntegrateWaveY(wvname,dest,xstart,xend)	String wvname,dest	Variable xstart,xend	Prompt wvname,"wave name",popup,WaveLIst("*",";","DIMS:2")	Prompt dest,"destination wave name"	Prompt xstart,"start"	Prompt xend,"end"	PauseUpdate;Silent 1		Variable nx,ny,i	String temp="t_"+dest	nx=DimSize($wvname,0)	ny=DimSize($wvname,1)	Duplicate $wvname,$temp	Duplicate/O $wvname,$dest	MatrixTranspose $temp	Redimension/N=(ny) $temp	Redimension/N=(nx) $dest	i=0	do		$temp=$wvname[i][q]		if(xstart==0&&xend==0)			$dest[i]=area($temp)		else			$dest[i]=area($temp,xstart,xend)		Endif		i+=1	while(i<ny)	KillWaves $temp//	$dest = area($wvname,xstart,xend)End