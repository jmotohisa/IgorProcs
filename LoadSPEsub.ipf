#pragma rtGlobals=1		// Use modern global access method.// loadSPEsub.ipf// 	collections of subprocedures for load SPE//	05/10/26 ver. 0.1 by J. Motohisa////	revision history//		05/10/26		ver 0.1	first version//		06/01/30		ver 0.1a: bugs in DataByteLength fixed//		08/09/21		ver 0.2a: operation using datafolder //		13/02/18		ver 0.2b: add notes//		16/04/29		ver 0.2c: consider glued spectra#include "AddNoteToWave"#include "MatrixOperations2"Function/D SPEReadBin(ref,pos,datatype)	Variable ref,pos,datatype	Variable/D val		FsetPos ref,pos	switch (datatype)		case 0: //char			FBinRead/B=3/F=1 ref,val		case 1: // short			break			FBinRead/B=3/F=2 ref,val		case 2: // LONG			FBinRead/B=3/F=3 ref,val			break		case 3: // float			FBinRead/B=3/F=4 ref,val			break		case 4: // double			FBinRead/B=3/F=5 ref,val			break		case 5: // BYTE, unsigned char			FBinRead/B=3/F=1/U ref,val			break		case 6: // WORD, unsigned int			FBinRead/B=3/F=2/U ref,val			break		case 7:// DWORD, unsigned long			FBinRead/B=3/F=3/U ref,val			break		default:			val=0	endswitch	return(val)EndFunction/S SPEReadStr(ref,pos,len)	Variable ref,pos,len	String str	str=PadString(" ",len,0)	FSetPos ref,pos	FBinRead ref,str	return(str)EndProc ReadSPEVersion(file)	String file	PauseUpdate; silent 1	FreadSPEversion(file)EndFunction FReadSPEversion(file)	string file	variable ref	string path,versionstr,ftype	path="home"	ftype=fileTypeStr()	if (strlen(file)<=0)		Open /D/R/P=$path/T=(ftype) ref		file= S_fileName		print file	endif	Open /R/P=$path/T=(ftype) ref as file		versionstr=SPEReadStr(ref,688,16)	Close ref	print versionstrEndProc Init_SPELoad()	PauseUpdate;Silent 1;	if(DataFolderExists("root:SPEdata")==0)		NewDataFolder root:SPEdata	endif	SetDataFolder root:SPEData	if(WaveExists($"SPEHeaderData_W")==0)		Make/N=18 SPEHeaderData_W		Make/N=12/T SPEHeaderData_TW		Make/N=(6,10) SPEHeaderData_ROI				SetDimLabel 0,0,'avgexp',SPEHeaderData_W		SetDimLabel 0,1,'exposure',SPEHeaderData_W		SetDimLabel 0,2,'exp_sec',SPEHeaderData_W		SetDimLabel 0,3,'noscan',SPEHeaderData_W		SetDimLabel 0,4,'npoint',SPEHeaderData_W		SetDimLabel 0,5,'datatype',SPEHeaderData_W	SetDimLabel 0,6,'calibpol1',SPEHeaderData_W	SetDimLabel 0,7,'calibpol2',SPEHeaderData_W	SetDimLabel 0,8,'calibpol3',SPEHeaderData_W	SetDimLabel 0,9,'calibpol4',SPEHeaderData_W	SetDimLabel 0,10,'ydim',SPEHeaderData_W	SetDimLabel 0,11,'lexpos',SPEHeaderData_W	SetDimLabel 0,12,'lnoscan',SPEHeaderData_W	SetDimLabel 0,13,'lavgexp',SPEHeaderData_W//	FSetPos ref,672//	FBinRead ref,stripfil		SetDimLabel 0,14,'StoreSync',SPEHeaderData_W	SetDimLabel 0,15,'NumFrames',SPEHeaderData_W	SetDimLabel 0,16,'ROIinfo',SPEHeaderData_W	SetDimLabel 0,17,'n_poly',SPEHeaderData_W			SetDimLabel 0,0,'startx',SPEHeaderData_ROI		SetDimLabel 0,1,'endx',SPEHeaderData_ROI		SetDimLabel 0,2,'groupx',SPEHeaderData_ROI		SetDimLabel 0,3,'starty',SPEHeaderData_ROI		SetDimLabel 0,4,'endy',SPEHeaderData_ROI		SetDimLabel 0,5,'groupy',SPEHeaderData_ROI	EndifEndFunction fdatatype(datatype)	Variable datatype	Variable dtype	if(datatype==0)		dtype= 2	else		if(datatype==1)			dtype= 32		else			if(datatype==2)				dtype= 16			else				if(datatype==3)					dtype= 16+64				endif			endif		endif	endif	return dtypeEnd// returs data byte length from datatype// datatype=0 - floatiing point//			1 - long integer//			2 - integer//			3 - unsigned integerFunction DataByteLength(datatype)	Variable datatype	Variable nbyte	if(datatype==1 || datatype==0)		nbyte=4	else		nbyte=2	endif//	if(datatype==0)//		nbyte=4//		else//		if(datatype==1)//			nbyte=8//		else//			if(datatype==2)//				nbyte=8//			else//				nbyte=4//			endif//		endif//	endif//	nbyte=4	return nbyteendfunction/S fileTypeStr()	string platform=IgorInfo(2),extstr	Variable IgorVersion	IgorVersion = str2num(StringFromList(1,StringFromList(0,IgorInfo(0),";"),":"))		if(cmpstr(platform,"Macintosh")==0)		extstr = ".SPEsGBWTEXT"	else		if(IgorVersion<4.05)			extstr="????"		else			extstr=".SPE"		endif	endif	return extstrEnd// load SPE y data from a given fileFunction FLoadSPEsub(file,path,name,npoint,NumFrames,ydim,datatype)	String file,path,name	Variable npoint,NumFrames,ydim,datatype		Variable skip=4100,dtype	dtype=fdatatype(datatype)//	nbyte=DataByteLength(datatype)// single spectrum	if(NumFrames==1&&ydim==1)		GBLoadWave/Q/N=dummy/T={(dtype),4}/B/S=(skip)/U=(npoint)/W=1/P=$path file//		if(strsearch(name,"dummyywave0",0)<0)			Duplicate/O dummy0,$name//		endif	else//multiple spectrum		if(ydim==1)			print "Loading multiple spectrum : number of frames = ",NumFrames			GBLoadWave/Q/N=dummy/T={(dtype),4}/B/S=(skip)/U=(npoint)/W=(NumFrames)/P=$path file			FWavesToMatrix("dummy","",name,0,NumFrames,1)// image		else			print "Loading images : image size = (",npoint, " x ", ydim,")"			GBLoadWave/Q/N=dummy/T={(dtype),4}/B/S=(skip)/U=(npoint)/W=(ydim)/P=$path file			FWavesToMatrix("dummy","",name,0,ydim,1)		endif	endif	AddStdNoteToWave($name,path,file)End MacroProc LoadSPEsub(file,path,name,npoint,NumFrames,ydim,datatype)	String file,path,name	Variable npoint,NumFrames,ydim,datatype	Prompt file,"File Name"	Prompt path,"Path name"	Prompt name,"wave Name"	Prompt npoint, "numberof data"	Prompt NumFrames, "number of frames"	Prompt ydim,"Y-dimension"	Prompt datatype,"datatype",popup, "FLOATING POINT;LONG INTEGER;INTEGER;UNSIGNED INTEGER"	PauseUpdate; Silent 1		FLoadSPEsub(file,path,name,npoint,NumFrames,ydim,datatype)End Macro// read header of SPE file (version 2.5)Proc SPEReadHeader(file,path)	String file,Path="home"	Prompt file,"file name"	Prompt Path, "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	PauseUpdate; Silent 1		FSPEReadHeaderV25(file,path)EndFunction FSPEReadHeaderV25(file,path)	String file,Path	Variable /D ref,lhead,lblock,npoint,offreg,xmin,xmax,dx,skip,fnsub,fexp	Variable/D datatype,dtype,n_poly,ROIinfo,startx,endx,groupx,starty,endy,groupy	Variable avgexp,exposure,exp_sec,lexpos,noscan,lnoscan,lavgexp	Variable calibpol1,calibpol2,calibpol3,calibpol4,ydim,StoreSync,NumFrames	Variable glue, offset, scalefactor, final	String xname,ftype	String extstr,stripfil//	open file dialogue to load data//	extstr = FileTypeStr()	extstr=".spe"//	print extstr	if (strlen(file)<=0)		Open /D/R/P=$path/T=(extstr) ref		file= S_fileName	endif	print file	if (strlen(file)<=0)		Open /D/R/P=$path/T=(ftype) ref		file= S_fileName	endif	print "Reading SPE file information from : ",file	stripfil=PadString(stripfil,16,0)		Open /R/P=$path/T=(ftype) ref as file	FsetPos ref,2;FBinRead /B=3/F=2 ref,avgexp// short	FsetPos ref,4;FBinRead /B=3/F=2 ref,exposure	FsetPos ref,10;FBinRead/B=3/F=4 ref,exp_sec// float	FsetPos ref,34; FBinRead/B=3/F=2 ref,noscan	FsetPos ref,42;FBinRead /B=3/F=2/U ref,npoint	FSetPos ref, 76; FBinRead/B=3/F=2 ref,glue //glue flag, short	FSetPos ref, 78; FBinRead/B=3/F=4 ref,offset //offset	FSetPos ref, 82; FBinRead/B=3/F=4 ref,final //final wavelength	FSetPos ref, 86; FBinRead/B=3/F=4 ref,minoverlap // minimum overrap	FSetPos ref, 90; FBinRead/B=3/F=4 ref,scalefactor //scalefactor	FsetPos ref,108; FBinRead /B=3/F=2 ref,datatype	FsetPos ref,158;FBinRead/B=3/F=5 ref,calibpol1 // double	FsetPos ref,166;FBinRead/B=3/F=5 ref,calibpol2	FsetPos ref,174;FBinRead/B=3/F=5 ref,calibpol3	FsetPos ref,182;FBinRead/B=3/F=5 ref,calibpol4	FSetPos ref,650;FBinRead/B=3/F=2 ref,SpecGrooves // spectrograph gratin grooves	FSetPos ref,656;FBinRead /B=3/F=2/U ref,ydim	FSetPos ref,660;FBinRead /B=3/F=3 ref,lexpos	FSetPos ref,664;FBinRead /B=3/F=3 ref,lnoscan	FSetPos ref,668;FBinRead /B=3/F=3 ref,lavgexp//	stripfil = FSPEReadStr(ref,672,16)	FSetPos ref,1434;FBinRead /B=3/F=2/U ref,StoreSync	FSetPos ref,1446;FBinRead /B=3/F=2/U ref,NumFrames	FSetPos ref,1510;FBinRead /B=3/F=2 ref,ROIinfo	FSetPos ref,1512+(ROIinfo-1)*12		FBinRead /B=3/F=2/U ref,startx		FBinRead /B=3/F=2/U ref,endx		FBinRead /B=3/F=2/U ref,groupx		FBinRead /B=3/F=2/U ref,starty		FBinRead /B=3/F=2/U ref,endy		FBinRead /B=3/F=2/U ref,groupy	FSetPos ref,3101;FBinRead /B/F=1 ref,n_poly	Close ref		print "datatype=",datatype,"exp_sec=",exp_sec	print "avgexp=",avgexp,"exposure=",exposure,"noscan=",noscan	print "lavgexp=",lavgexp,"lexpos=",lexpos,"lnoscan=",lnoscan	print calibpol1,calibpol2,calibpol3,calibpol4	print "ydim=",ydim,"StoreSync=",StoreSync,"NumFrames=",Numframes	print "npoint=",npoint,"datatype=",datatype,"ROIinfo=",ROIinfo,n_poly	print startx,endx,groupx,starty,endy,groupy//// read coeffcients for linearization//	GBLoadWave/N=$"coef"/T={4,4}/B/U=6/S=3263/W=1/P=$path file//	skip=4100//	print dtype//	GBLoadWave /N=$"dummyywave"/T={(dtype),4}/B/U=(npoint)/S=(skip)/W=1/P=$path file//	SetScale/P x 1,1,"", $dw0End// Function to read header: see FBinRead for detail//   pos: byte offset//   b: byte ordering (for WinSpec, b=3)number of byte://   f: Native binary format of the object (default).//	    1:Signed one-byte integer.//	    2:Signed 16-bit word; two bytes. (int)//	    3:Signed 32-bit word; four bytes. (long)//	    4:32-bit IEEE floating point. (float)//	    5:64-bit IEEE floating point. (double)//   u: unsined ? true=1//   name: name of the variable//Function/S SPEReadHeaderStr(pos,b,f,u,name)	Variable pos,b,f,u	String name	return(SPEReadHeaderStr1(pos,b,f,u,name)+SPEReadHeaderStr2("SPEHeaderData_W",name))End FunctionFunction/S SPEReadHeaderROIstr(pos,b,f,u,name,i)	Variable pos,b,f,u,i	String name		String cmd	cmd="SPEHeaderData_ROI[%'"+name+"']["+num2str(i)+"]="+name+";"	return(SPEReadHeaderStr1(pos,b,f,u,name)+cmd)End FunctionFunction/S SPEReadHeaderStr1(pos,b,f,u,name)	Variable pos,b,f,u	String name	String cmd1,cmd2		if(pos>=0)		sprintf cmd1,"FsetPos ref,%d;",pos	else		cmd1=""	endif	if(u==1)		sprintf cmd2,"FBinRead/B=%d/F=%d/U ref ,%s;",b,f,name	else		sprintf cmd2,"FBinRead/B=%d/F=%d ref ,%s;",b,f,name	endif	return(cmd1+cmd2)EndFunction/S SPEReadHeaderStr2(wname,name)	String wname,name	String cmd	cmd=wname+"[%'" + name+"']="+name + ";"	return(cmd)EndMacro SPEReadHeader_DataFolder(file,path)	String file,Path="home"	Prompt file,"file name"	Prompt Path, "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	PauseUpdate; Silent 1	Variable /D ref,lhead,lblock,npoint,offreg,xmin,xmax,dx,skip,fnsub,fexp	Variable/D datatype,dtype,n_poly,ROIinfo,startx,endx,groupx,starty,endy,groupy	Variable avgexp,exposure,exp_sec,lexpos,noscan,lnoscan,lavgexp	Variable calibpol1,calibpol2,calibpol3,calibpol4,ydim,StoreSync,NumFrames	Variable i	String xname,ftype	String extstr,stripfil,cmmt	String cmd//	open file dialogue to load data//	extstr = FileTypeStr()	extstr=".spe"//	print extstr	if (strlen(file)<=0)		Open /D/R/P=$path/T=(extstr) ref		file= S_fileName	endif	print file	if (strlen(file)<=0)		Open /D/R/P=$path/T=(ftype) ref		file= S_fileName	endif	print "Reading SPE file information from : ",file	stripfil=PadString(stripfil,16,0)	cmmt=PadString(cmmt,80,0)	SetDataFolder root:SPEdata		Open /R/P=$path/T=(ftype) ref as file//	Execute SPEReadHeaderStr(0,3,2,1,"dioden")	Execute SPEReadHeaderStr(2,3,2,0,"avgexp")	Execute SPEReadHeaderStr(4,3,2,0,"exposure")//	Execute SPEReadHeaderStr(6,3,2,1,"xDimDet")//	Execute SPEReadHeaderStr(8,3,2,0,"mode")	Execute SPEReadHeaderStr(10,3,4,0,"exp_sec")//	Execute SPEReadHeaderStr(14,3,2,0,"asyavg")//	Execute SPEReadHeaderStr(16,3,2,0,"asyseq")//	Execute SPEReadHeaderStr(18,3,2,1,"yDimDet")	cmmt=PadString(cmmt,10,0)	FsetPos ref,20	FBinRead ref,cmmt	print cmmt	SPEHeaderData_TW[0]=cmmt//	Execute SPEReadHeaderStr(30,3,2,0,"ehour")//	Execute SPEReadHeaderStr(32,3,2,0,"eminute")	Execute SPEReadHeaderStr(34,3,2,0,"noscan")//	Execute SPEReadHeaderStr(36,3,2,0,"fastacc")//	Execute SPEReadHeaderStr(38,3,2,0,"seconds")//	Execute SPEReadHeaderStr(40,3,2,0,"DetType")	Execute SPEReadHeaderStr(42 ,3,2,1,"npoint") // xdim ?//	Execute SPEReadHeaderStr(44,3,2,0,"stdiode")//	Execute SPEReadHeaderStr(46,3,4,0,"nanox")//	Execute SPEReadHeaderStr(50,3,4,0,"calibdio0")//	Execute SPEReadHeaderStr(54,3,4,0,"calibdio1")//	Execute SPEReadHeaderStr(58,3,4,0,"calibdio2")//	Execute SPEReadHeaderStr(62,3,4,0,"calibdio3")//	Execute SPEReadHeaderStr(66,3,4,0,"calibdio4")//	Execute SPEReadHeaderStr(70,3,4,0,"calibdio5")//	Execute SPEReadHeaderStr(74,3,4,0,"calibdio6")//	Execute SPEReadHeaderStr(78,3,4,0,"calibdio7")//	Execute SPEReadHeaderStr(82,3,4,0,"calibdio8")//	Execute SPEReadHeaderStr(86,3,4,0,"calibdio9")	// fastfile, 90, 16 ,string//	Execute SPEReadHeaderStr(106 ,3,2,0,"asynen")	Execute SPEReadHeaderStr(108 ,3,2,0,"datatype")	Execute SPEReadHeaderStr(158 ,3,5,0,"calibpol1")	Execute SPEReadHeaderStr(166 ,3,5,0,"calibpol2")	Execute SPEReadHeaderStr(174 ,3,5,0,"calibpol3")	Execute SPEReadHeaderStr(182 ,3,5,0,"calibpol4")	i=0	cmmt=PadString(cmmt,80,0)	do		FSetPos ref,200+i*80		FBinRead ref,cmmt		SPEHeaderData_TW[i+1]=cmmt		i+=1	while(i<5)	Execute SPEReadHeaderStr(656 ,3,2,1,"ydim")	// 658,3,2,0,"scramble"	Execute SPEReadHeaderStr(660 ,3,3,0,"lexpos")	Execute SPEReadHeaderStr(664 ,3,3,0,"lnoscan")	Execute SPEReadHeaderStr(668 ,3,3,0,"lavgexp")	//	FSetPos ref,672	//	FBinRead ref,stripfil	Execute SPEReadHeaderStr(1434 ,3,2,1,"StoreSync")	Execute SPEReadHeaderStr(1446 ,3,2,1,"NumFrames")	// ROI 	Execute SPEReadHeaderStr(1510 ,3,2,0,"ROIinfo")		FSetPos ref,1512+(ROIinfo-1)*12	i=0	do		Execute SPEReadHeaderROIstr(-1,3,2,1,"startx",i)		Execute SPEReadHeaderROIstr(-1,3,2,1,"endx",i)		Execute SPEReadHeaderROIstr(-1,3,2,1,"groupx",i)		Execute SPEReadHeaderROIstr(-1,3,2,1,"starty",i)		Execute SPEReadHeaderROIstr(-1,3,2,1,"endy",i)		Execute SPEReadHeaderROIstr(-1,3,2,1,"groupy",i)		i+=1	while(i<10)	Execute SPEReadHeaderStr(3101 ,1,1,0,"n_poly")	Close ref		print "datatype=",datatype,"exp_sec=",exp_sec	print "avgexp=",avgexp,"exposure=",exposure,"noscan=",noscan	print "lavgexp=",lavgexp,"lexpos=",lexpos,"lnoscan=",lnoscan	print calibpol1,calibpol2,calibpol3,calibpol4	print "ydim=",ydim,"StoreSync=",StoreSync,"NumFrames=",Numframes	print "npoint=",npoint,"datatype=",datatype,"ROIinfo=",ROIinfo,n_poly//	print startx,endx,groupx,starty,endy,groupy//// read coeffcients for linearization	GBLoadWave/Q/N=$"coef"/T={4,4}/B/U=6/S=3263/W=1/P=$path file//	skip=4100//	print dtype//	GBLoadWave /N=$"dummyywave"/T={(dtype),4}/B/U=(npoint)/S=(skip)/W=1/P=$path file//	SetScale/P x 1,1,"", $dw0	SetDataFolder root:End//// for older versions of SPE// read header of SPE file (version 1.6)Macro SPEReadHeaderV16(file,path)	String file,Path="home"	Prompt file,"file name"	Prompt Path, "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	PauseUpdate; Silent 1	Variable /D ref,lhead,lblock,npoint,offreg,xmin,xmax,dx,skip,fnsub,fexp	Variable/D datatype,dtype,n_poly,ROIinfo,startx,endx,groupx,starty,endy,groupy	Variable avgexp,exposure,exp_sec,lexpos,noscan,lnoscan,lavgexp	Variable calibpol1,calibpol2,calibpol3,calibpol4,ydim,StoreSync,NumFrames	Variable glue, offset, scalefactor, final	String xname,ftype	String extstr,stripfil//	open file dialogue to load data//	extstr = FileTypeStr()	extstr=".spe"//	print extstr	if (strlen(file)<=0)		Open /D/R/P=$path/T=(extstr) ref		file= S_fileName	endif	print file	if (strlen(file)<=0)		Open /D/R/P=$path/T=(ftype) ref		file= S_fileName	endif	print "Reading SPE file information from : ",file	stripfil=PadString(stripfil,16,0)		Open /R/P=$path/T=(ftype) ref as file	FsetPos ref,2;FBinRead /B=3/F=2 ref,avgexp// short	FsetPos ref,4;FBinRead /B=3/F=2 ref,exposure	FsetPos ref,10;FBinRead/B=3/F=4 ref,exp_sec// float	FsetPos ref,34; FBinRead/B=3/F=2 ref,noscan	FsetPos ref,42;FBinRead /B=3/F=2/U ref,npoint	FSetPos ref, 76; FBinRead/B=3/F=2 ref,glue //glue flag, short	FSetPos ref, 78; FBinRead/B=3/F=4 ref,offset //offset	FSetPos ref, 82; FBinRead/B=3/F=4 ref,final //final wavelength	FSetPos ref, 86; FBinRead/B=3/F=4 ref,minoverlap // minimum overrap	FSetPos ref, 90; FBinRead/B=3/F=4 ref,scalefactor //scalefactor	FsetPos ref,108; FBinRead /B=3/F=2 ref,datatype	FsetPos ref,158;FBinRead/B=3/F=5 ref,calibpol1 // double	FsetPos ref,166;FBinRead/B=3/F=5 ref,calibpol2	FsetPos ref,174;FBinRead/B=3/F=5 ref,calibpol3	FsetPos ref,182;FBinRead/B=3/F=5 ref,calibpol4	FSetPos ref,650;FBinRead/B=3/F=2 ref,SpecGrooves // spectrograph gratin grooves	FSetPos ref,656;FBinRead /B=3/F=2/U ref,ydim	FSetPos ref,660;FBinRead /B=3/F=3 ref,lexpos	FSetPos ref,664;FBinRead /B=3/F=3 ref,lnoscan	FSetPos ref,668;FBinRead /B=3/F=3 ref,lavgexp//	FSetPos ref,672;FBinRead ref,stripfil	FSetPos ref,1434;FBinRead /B=3/F=2/U ref,StoreSync	FSetPos ref,1446;FBinRead /B=3/F=2/U ref,NumFrames	FSetPos ref,1510;FBinRead /B=3/F=2 ref,ROIinfo	FSetPos ref,1512+(ROIinfo-1)*12		FBinRead /B=3/F=2/U ref,startx		FBinRead /B=3/F=2/U ref,endx		FBinRead /B=3/F=2/U ref,groupx		FBinRead /B=3/F=2/U ref,starty		FBinRead /B=3/F=2/U ref,endy		FBinRead /B=3/F=2/U ref,groupy	FSetPos ref,3101;FBinRead /B/F=1 ref,n_poly	Close ref		print "datatype=",datatype,"exp_sec=",exp_sec	print "avgexp=",avgexp,"exposure=",exposure,"noscan=",noscan	print "lavgexp=",lavgexp,"lexpos=",lexpos,"lnoscan=",lnoscan	print calibpol1,calibpol2,calibpol3,calibpol4	print "ydim=",ydim,"StoreSync=",StoreSync,"NumFrames=",Numframes	print "npoint=",npoint,"datatype=",datatype,"ROIinfo=",ROIinfo,n_poly	print startx,endx,groupx,starty,endy,groupy//// read coeffcients for linearization//	GBLoadWave/N=$"coef"/T={4,4}/B/U=6/S=3263/W=1/P=$path file//	skip=4100//	print dtype//	GBLoadWave /N=$"dummyywave"/T={(dtype),4}/B/U=(npoint)/S=(skip)/W=1/P=$path file//	SetScale/P x 1,1,"", $dw0End// headerFunction SPEReadHeader1(ref)	Variable ref	Variable DATEMAX=10,TIMEMAX=7,COMMENTMAX=80	Variable LABELMAX=16,FILEVERMAX=16,HDRNAMEMAX=120	Variable ROIMAX=10	Variable   ControllerVersion=SPEReadBin(ref, 0,1) // Hardware Version	Variable   LogicOutput     =SPEReadBin(ref,  2,1) // Definition of Output BNC	Variable   AmpHiCapLowNoise=SPEReadBin(ref,  4,6) //  Amp Switching Mode	Variable   xDimDet         =SPEReadBin(ref,  6,6) //  Detector x dimension of chip.	Variable   mode            =SPEReadBin(ref,  8,1) //  timing mode	Variable   exp_sec         =SPEReadBin(ref, 10,3) //  alternitive exposure, in sec.	Variable   VChipXdim       =SPEReadBin(ref, 14,1) //  Virtual Chip X dim	Variable   VChipYdim       =SPEReadBin(ref, 16,1) //  Virtual Chip Y dim	Variable   yDimDet         =SPEReadBin(ref, 18,6) //  y dimension of CCD or detector.	String     date            =SPEReadStr(ref, 20,DATEMAX) //  date	Variable   VirtualChipFlag =SPEReadBin(ref, 30,1) //  On/Off	//  String    Spare_1      =SPEReadstr(ref, 32,2) //	Variable   noscan          =SPEReadBin(ref, 34,1) //  Old number of scans - should always be -1	Variable   DetTemperature  =SPEReadBin(ref, 36,3) //  Detector Temperature Set	Variable   DetType         =SPEReadBin(ref, 40,1) //  CCD/DiodeArray type	Variable   xdim            =SPEReadBin(ref, 42,6) //  actual # of pixels on x axis	Variable   stdiode         =SPEReadBin(ref, 44,1) //  trigger diode	Variable   DelayTime       =SPEReadBin(ref, 46,3) //  Used with Async Mode	Variable   ShutterControl  =SPEReadBin(ref, 50,6) //  Normal, Disabled Open, Disabled Closed	Variable   AbsorbLive      =SPEReadBin(ref, 52,1) //  On/Off	Variable   AbsorbMode      =SPEReadBin(ref, 54,6) //  Reference Strip or File	Variable   CanDoVirtualChipFlag=SPEReadBin(ref,56,1) //  T/F Cont/Chip able to do Virtual Chip	Variable   ThresholdMinLive=SPEReadBin(ref, 58,1) //  On/Off	Variable   ThresholdMinVal =SPEReadBin(ref, 60,3) //  Threshold Minimum Value	Variable   ThresholdMaxLive=SPEReadBin(ref, 64,1) //  On/Off	Variable   ThresholdMaxVal =SPEReadBin(ref, 66,3) //  Threshold Maximum Value	Variable   SpecAutoSpectroMode=SPEReadBin(ref,70,1) //  T/F Spectrograph Used	Variable   SpecCenterWlNm  =SPEReadBin(ref, 72,3) //  Center Wavelength in Nm	Variable   SpecGlueFlag    =SPEReadBin(ref, 76,1) //  T/F File is Glued	Variable   SpecGlueStartWlNm=SPEReadBin(ref, 78,3) // Starting Wavelength in Nm	Variable   SpecGlueEndWlNm =SPEReadBin(ref, 82,3) // Starting Wavelength in Nm	Variable   SpecGlueMinOvrlpNm=SPEReadBin(ref, 86,3) //  Minimum Overlap in Nm	Variable   SpecGlueFinalResNm=SPEReadBin(ref, 90,3) //  Final Resolution in Nm	Variable   PulserType      =SPEReadBin(ref, 94,1) //  0=None, PG200=1, PTG=2, DG535=3	Variable   CustomChipFlag  =SPEReadBin(ref, 96,1) //  T/F Custom Chip Used	Variable   XPrePixels      =SPEReadBin(ref, 98,1) //  Pre Pixels in X direction	Variable   XPostPixels     =SPEReadBin(ref,100,1) //  Post Pixels in X direction	Variable   YPrePixels      =SPEReadBin(ref,102,1) //  Pre Pixels in Y direction 	Variable   YPostPixels     =SPEReadBin(ref,104,1) //  Post Pixels in Y direction	Variable   asynen          =SPEReadBin(ref,106,1) //  asynchron enable flag  0 = off	Variable   datatype        =SPEReadBin(ref,108,1) //  experiment datatype	//                 0 =   float (4 bytes)	//                 1 =   long (4 bytes)	//                 2 =   short (2 bytes)	//                 3 =   unsigned short (2 bytes)	Variable   PulserMode      =SPEReadBin(ref,110,1) //  Repetitive/Sequential	Variable   PulserOnChipAccums=SPEReadBin(ref,112,6) //  Num PTG On-Chip Accums	Variable   PulserRepeatExp =SPEReadBin(ref,114,7) //  Num Exp Repeats (Pulser SW Accum)	Variable   PulseRepWidth   =SPEReadBin(ref,118,3) //  Width Value for Repetitive pulse (usec)	Variable   PulseRepDelay   =SPEReadBin(ref,122,3) //  Width Value for Repetitive pulse (usec)	Variable   PulseSeqStartWidth=SPEReadBin(ref,126,3) //  Start Width for Sequential pulse (usec)	Variable   PulseSeqEndWidth=SPEReadBin(ref,130,3) //  End Width for Sequential pulse (usec)	Variable   PulseSeqStartDelay=SPEReadBin(ref,134,3) //  Start Delay for Sequential pulse (usec)	Variable   PulseSeqEndDelay=SPEReadBin(ref,138,3) //  End Delay for Sequential pulse (usec)	Variable   PulseSeqIncMode =SPEReadBin(ref,142,1) //  Increments: 1=Fixed, 2=Exponential	Variable   PImaxUsed       =SPEReadBin(ref,144,1) // PI-Max type controller flag	Variable   PImaxMode       =SPEReadBin(ref,146,1) // PI-Max mode	Variable   PImaxGain       =SPEReadBin(ref,148,1) //  PI-Max Gain	Variable   BackGrndApplied =SPEReadBin(ref,150,1) //  1 if background subtraction done	Variable   PImax2nsBrdUsed =SPEReadBin(ref,152,1) //  T/F PI-Max 2ns Board Used	Variable   minblk          =SPEReadBin(ref,154,6) //  min. # of strips per skips	Variable   numminblk       =SPEReadBin(ref,156,6) //  # of min-blocks before geo skps	Variable   SpecMirrorLocation1=SPEReadBin(ref,158,1) // Spectro Mirror Location, 0=Not Present	Variable   SpecMirrorLocation2=SPEReadBin(ref,160,1) //  Spectro Mirror Location, 0=Not Present	// Variable   SpecSlitLocation[4]=SPEReadBin(ref,162,1) //          162,1) //  Spectro Slit Location, 0=Not Present	Variable   CustomTimingFlag=SPEReadBin(ref, 170,1) //  T/F Custom Timing Used	String     ExperimentTimeLocal=SPEReadStr(ref, 172,TIMEMAX) //  Experiment Local Time as hhmmss\0	String     ExperimentTimeUTC=SPEReadStr(ref, 179,TIMEMAX) // Experiment UTC Time as hhmmss\0	Variable   ExposUnits      =SPEReadBin(ref, 186,1) //  User Units for Exposure	Variable   ADCoffset       =SPEReadBin(ref, 188,6) //  ADC offset	Variable   ADCrate         =SPEReadBin(ref, 190,6) //  ADC rate	Variable   ADCtype         =SPEReadBin(ref, 192,6) //  ADC type	Variable   ADCresolution   =SPEReadBin(ref, 194,6) //  ADC resolution	Variable   ADCbitAdjust    =SPEReadBin(ref, 196,6) //  ADC bit adjust	Variable   gain            =SPEReadBin(ref, 198,6) //  gain	String     Comments1       =SPEReadStr(ref, 200,     COMMENTMAX) //  File Comments	String     Comments2       =SPEReadStr(ref, 200+80,  COMMENTMAX) //  File Comments	String     Comments3       =SPEReadStr(ref, 200+80*2,COMMENTMAX) //  File Comments	String     Comments4       =SPEReadStr(ref, 200+80*3,COMMENTMAX) //  File Comments	String     Comments5       =SPEReadStr(ref, 200+80*4,COMMENTMAX) //  File Comments	Variable   geometric       =SPEReadBin(ref, 600,6) //  geometric ops: rotate 0x01,reverse 0x02, flip 0x04	String     xlabel=SPEReadStr(ref,602 ,LABELMAX) // intensity display string	Variable   cleans          =SPEReadBin(ref, 618,6) // cleans	Variable   NumSkpPerCln    =SPEReadBin(ref, 620,6) // number of skips per clean.	Variable   SpecMirrorPos1  =SPEReadBin(ref, 622,1) // Spectrograph Mirror Positions	Variable   SpecMirrorPos2  =SPEReadBin(ref, 624,1) // Spectrograph Mirror Positions	Variable   SpecSlitPos1    =SPEReadBin(ref, 626,3) // Spectrograph Slit Positions	Variable   SpecSlitPos2    =SPEReadBin(ref, 630,3) // Spectrograph Slit Positions	Variable   SpecSlitPos3    =SPEReadBin(ref, 634,3) // Spectrograph Slit Positions	Variable   SpecSlitPos4    =SPEReadBin(ref, 638,3) // Spectrograph Slit Positions	Variable   AutoCleansActive=SPEReadBin(ref, 642,1) // T/F	Variable   UseContCleansInst=SPEReadBin(ref, 644,1) // T/F	Variable   AbsorbStripNum  =SPEReadBin(ref, 646,1) // Absorbance Strip Number	Variable   SpecSlitPosUnits=SPEReadBin(ref, 648,1) // Spectrograph Slit Position Units	Variable   SpecGrooves     =SPEReadBin(ref, 650,3) //Spectrograph Grating Grooves	Variable   srccmp          =SPEReadBin(ref, 654,1) //number of source comp. diodes	Variable   ydim            =SPEReadBin(ref, 656,6) //y dimension of raw data.	Variable   scramble        =SPEReadBin(ref, 658,1) //0=scrambled,1=unscrambled	Variable   ContinuousCleansFlag=SPEReadBin(ref, 660,1) //T/F Continuous Cleans Timing Option	Variable   ExternalTriggerFlag=SPEReadBin(ref, 662,1) //T/F External Trigger Timing Option	Variable   lnoscan         =SPEReadBin(ref, 664,2) //Number of scans (Early WinX)	Variable   lavgexp         =SPEReadBin(ref, 668,2) //Number of Accumulations	Variable   ReadoutTime     =SPEReadBin(ref, 672,3) //Experiment readout time	Variable   TriggeredModeFlag=SPEReadBin(ref, 676,1) //T/F Triggered Timing Option	//  String    Spare_2      =SPEReadStr(ref, 678,10) //	String     sw_version      =SPEReadStr(ref, 688,FILEVERMAX) //Version of SW creating this file	Variable   type            =SPEReadBin(ref, 704  ,1)	//                 1 = new120 (Type II)	//                 2 = old120 (Type I )           	//                 3 = ST130                      	//                 4 = ST121                      	//                 5 = ST138                      	//                 6 = DC131 (PentaMax)           	//                 7 = ST133 (MicroMax/SpectroMax)	//                 8 = ST135 (GPIB)               	//                 9 = VICCD                      	//                10 = ST116 (GPIB)               	//                11 = OMA3 (GPIB)                	//                12 = OMA4                       	Variable   flatFieldApplied=SPEReadBin(ref, 706 ,1) // if flat field was applied.	//  String Spare_3         =SPEReadStr(ref, 708 ,16) // 	Variable   kin_trig_mode   =SPEReadBin(ref, 724 ,1) //Kinetics Trigger Mode	String     dlabel          =SPEReadStr(ref, 726 ,LABELMAX) //Data label.		return(0)EndFunction SPEReadHeader2(ref)	Variable ref	Variable DATEMAX=10,TIMEMAX=7,COMMENTMAX=80	Variable LABELMAX=16,FILEVERMAX=16,HDRNAMEMAX=120	Variable ROIMAX=10		Variable i		//  String    Spare_4    =SPEReadstr(ref, 742 ,436) //	String     PulseFileName   =SPEReadStr(ref,1178,HDRNAMEMAX) //  Name of Pulser File with Pulse Widths/Delays (for Z-Slice)	String     AbsorbFileName  =SPEReadStr(ref,1298,HDRNAMEMAX) // Name of Absorbance File (if File Mode)	Variable   NumExpRepeats   =SPEReadBin(ref,1418,7) //  Number of Times experiment repeated	Variable   NumExpAccums    =SPEReadBin(ref,1422,7) //  Number of Time experiment accumulated	Variable   YT_Flag         =SPEReadBin(ref,1426,1) //  Set to 1 if this file contains YT data	Variable   clkspd_us       =SPEReadBin(ref,1428,3) //  Vert Clock Speed in micro-sec	Variable   HWaccumFlag     =SPEReadBin(ref,1432,1) //  set to 1 if accum done by Hardware.	Variable   StoreSync       =SPEReadBin(ref,1434,1) //  set to 1 if store sync used	Variable   BlemishApplied  =SPEReadBin(ref,1436,1) // set to 1 if blemish removal applied	Variable   CosmicApplied   =SPEReadBin(ref,1438,1) //  set to 1 if cosmic ray removal applied	Variable   CosmicType      =SPEReadBin(ref,1440,1) //  if cosmic ray applied, this is type	Variable   CosmicThreshold =SPEReadBin(ref,1442,3) // Threshold of cosmic ray removal.  	Variable   NumFrames       =SPEReadBin(ref,1446,2) //  number of frames in file.         	Variable   MaxIntensity    =SPEReadBin(ref,1450,3) //  max intensity of data (future)    	Variable   MinIntensity    =SPEReadBin(ref,1454,3) //  min intensity of data (future)    	String     ylabel          =SPEReadStr(ref,1458,LABELMAX) //  y axis label.         	Variable   ShutterType     =SPEReadBin(ref,1474,6) //  shutter type.         	Variable   shutterComp     =SPEReadBin(ref,1476,3) //  shutter compensation time.        	Variable   readoutMode     =SPEReadBin(ref,1480,6) //  readout mode, full,kinetics, etc  	Variable   WindowSize      =SPEReadBin(ref,1482,6) //  window size for kinetics only.    	Variable   clkspd          =SPEReadBin(ref,1484,6) //  clock speed for kinetics & frame transfer	Variable   interface_type  =SPEReadBin(ref,1486,6) //  computer interface    	//     (isa-taxi, pci, eisa, etc.) 	Variable   NumROIsInExperiment=SPEReadBin(ref,1488,1) //  May be more than the 10 allowed in	//      this header (if 0, assume 1)	//  String    Spare_5      =SPEReadBin(ref,1490 ,16) //           	Variable   controllerNum   =SPEReadBin(ref,1506,6) //  if multiple controller system will	//     have controller number data came from.  	//     this is a future item.      	Variable   SWmade          =SPEReadBin(ref,1508,6) //  Which software package created this file 	Variable   NumROI          =SPEReadBin(ref,1510,1) //  number of ROIs used. if 0 assume 1.	return(0)EndFunction SPEReadHeader3(ref)	Variable ref	Variable DATEMAX=10,TIMEMAX=7,COMMENTMAX=80	Variable LABELMAX=16,FILEVERMAX=16,HDRNAMEMAX=120	Variable ROIMAX=10		Variable i	Variable startx,endx,groupx,starty,endy,groupy	// ROI entries   (1512 - 1631)	i=0	do		startx =SPEReadBin(ref,1512*i+12,6) //     left x start value.               		endx   =SPEReadBin(ref,1514*i+12,6) //    right x value.                    		groupx =SPEReadBin(ref,1516*i+12,6) //     amount x is binned/grouped in hw. 		starty =SPEReadBin(ref,1518*i+12,6) //     top y start value.                		endy   =SPEReadBin(ref,1520*i+12,6) //     bottom y value.                   		groupy =SPEReadBin(ref,1522*i+12,6) //     amount y is binned/grouped in hw. 		i+=1	while(i<ROIMAX)	//		String     FlatField      =SPEReadStr(ref,1632,HDRNAMEMAX) //  Flat field file name.       	String     background      =SPEReadStr(ref,1752,HDRNAMEMAX) //  background sub. file name.  	String     blemish         =SPEReadStr(ref,1872,HDRNAMEMAX) //  blemish file name.          	Variable   file_header_ver =SPEReadBin(ref,1992,3) //  version of this file header 	// String     YT_Info         =SPEReadBin(ref,1996,1000) //  Reserved for YT information	Variable   WinView_id      =SPEReadBin(ref,2996,2) //  == 0x01234567L if file created by WinX	//                       START OF X CALIBRATION STRUCTURE (3000 - 3488)	Variable/D offset_x        =SPEReadBin(ref,3000,4) //  offset for absolute data scaling	Variable/D factor_x        =SPEReadBin(ref,3008,4) //  factor for absolute data scaling	Variable     current_unit_x  =SPEReadBin(ref,3016,0) //  selected scaling unit           //	Variable     reserved1_x     =SPEReadBin(ref,3017,0) //  reserved                        	String    string_x         =SPEReadStr(ref,3018,40) //  special string for scaling      //	String    reserved2_x      =SPEReadStr(ref,3058,40) //  reserved                        	Variable    calib_valid_x    =SPEReadBin(ref,3098,0) //  flag if calibration is valid    	Variable    input_unit_x     =SPEReadBin(ref,3099,0) //  current input units for "calib_value"	Variable    polynom_unit_x   =SPEReadBin(ref,3100,0) //  linear UNIT and used in the "polynom_coeff"	Variable    polynom_order_x  =SPEReadBin(ref,3101,0) //  ORDER of calibration POLYNOM    	Variable    calib_count_x    =SPEReadBin(ref,3102,0) //  valid calibration data pairs    //	Variable/D pixel_position_x[10]    =SPEReadBin(ref,3103,4) //  pixel pos. of calibration data  //	Variable/D calib_value_x[10]       =SPEReadBin(ref,3183,4) //  calibration VALUE at above pos  //	Variable/D polynom_coeff_x[6]      =SPEReadBin(ref,3263,4) //  polynom COEFFICIENTS            	Variable/D laser_position_x=SPEReadBin(ref,3311,4) //  laser wavenumber for relativ WN //	String     reserved3_x     =SPEReadBin(ref,3319,0) //  reserved                        	Variable   new_calib_flag_x=SPEReadBin(ref,3320,5) //  If set to 200, valid label below	String     calib_label_x   =SPEReadStr(ref,3321,81) //  Calibration label (NULL term'd) 	String     expansion_x     =SPEReadStr(ref,3402,87) //  Calibration Expansion area      		//                         START OF Y CALIBRATION STRUCTURE (3489 - 3977)	Variable/D offset_y        =SPEReadBin(ref,3489,4) //  offset for absolute data scaling	Variable/D factor_y        =SPEReadBin(ref,3497,4) //  factor for absolute data scaling	Variable     current_unit_y  =SPEReadBin(ref,3505,0) //  selected scaling unit           //	Variable     reserved1_y     =SPEReadBin(ref,3506,0) //  reserved                        	String     string_y        =SPEReadStr(ref,3507,40) //  special string for scaling      //	String     reserved2_y     =SPEReadStr(ref,3547,40) //  reserved                        	Variable     calib_valid_y   =SPEReadBin(ref,3587,0) //  flag if calibration is valid    	Variable     input_unit_y    =SPEReadBin(ref,3588,0) //  current input units for "calib_value"	Variable     polynom_unit_y  =SPEReadBin(ref,3589,0) //  linear UNIT and used in the "polynom_coeff"	Variable     polynom_order_y =SPEReadBin(ref,3590,0) //  ORDER of calibration POLYNOM    	Variable     calib_count_y   =SPEReadBin(ref,3591,0) //  valid calibration data pairs    //	Variable/D pixel_position_y[10]    =SPEReadBin(ref,       3592,4) //  pixel pos. of calibration data  //	Variable/D calib_value_y[10]       =SPEReadBin(ref,       3672,4) //  calibration VALUE at above pos  //	Variable/D polynom_coeff_y[6]      =SPEReadBin(ref,       3752,4) //  polynom COEFFICIENTS            	Variable/D laser_position_y=SPEReadBin(ref,3800,4) //  laser wavenumber for relativ WN //	Variable     reserved3_y     =SPEReadBin(ref,3808 ,0) // reserved                        	Variable   new_calib_flag_y=SPEReadBin(ref,3809,5) //  If set to 200, valid label below	String     calib_label_y   =SPEReadStr(ref,3810,81) //  Calibration label (NULL term'd) 	String     expansion_y     =SPEReadStr(ref,3891,87) //  Calibration Expansion area      		// //                          END OF CALIBRATION STRUCTURES		String     Istring           =SPEReadStr(ref,3978,40) //  special intensity scaling string//	String     Spare_6           =SPEReadStr(ref,4018,25) //  	Variable   SpecType          =SPEReadBin(ref,4043,5) //  spectrometer type (acton, spex, etc.)	Variable   SpecModel         =SPEReadBin(ref,4044,5) //  spectrometer model (type dependent)	Variable   PulseBurstUsed    =SPEReadBin(ref,4045,5) //  pulser burst mode on/off	Variable   PulseBurstCount   =SPEReadBin(ref,4046,7) //  pulser triggers per burst	Variable/D ulseBurstPeriod   =SPEReadBin(ref,4050,4) //  pulser burst period (in usec)	Variable   PulseBracketUsed  =SPEReadBin(ref,4058,5) //  pulser bracket pulsing on/off	Variable   PulseBracketType  =SPEReadBin(ref,4059,5) //  pulser bracket pulsing type	Variable/D PulseTimeConstFast=SPEReadBin(ref,4060,4) //  pulser slow exponential time constant (in usec)	Variable/D PulseAmplitudeFast=SPEReadBin(ref,4068,4) //  pulser fast exponential amplitude constant	Variable/D PulseTimeConstSlow=SPEReadBin(ref,4076,4) //  pulser slow exponential time constant (in usec)	Variable/D PulseAmplitudeSlow=SPEReadBin(ref,4084,4) //  pulser slow exponential amplitude constant	Variable   AnalogGain        =SPEReadBin(ref,4092,1) //  analog gain	Variable   AvGainUsed        =SPEReadBin(ref,4094,1) //  avalanche gain was used	Variable   AvGain            =SPEReadBin(ref,4096,1) // avalanche gain value	Variable   lastvalue         =SPEReadBin(ref,4098,1) // Always the LAST value in the header	// end of WINXHEADER_STRUCT		return(0)End