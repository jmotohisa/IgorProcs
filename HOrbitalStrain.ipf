#pragma rtGlobals=1		// Use modern global access method.// HOrbitalStrain.ipf// // Eigenvalues and Eigenvectors for Orbital-Strain Hamiltonian in arbitral substrate orientation// with some routine for the calculation of strain in quantum wells (biaxial strain)////	05/12/26 ver 0.2b by J. Motohisa////	revision history//		05/12/01 ver 0.1a: first version//		05/12/13 ver 0.2a: Calculation Errors in the matrix elements are fixed. //		05/12/26 ver 0.2b: bugs during sort in OSHamiltonian_Eigv_cc is fixed.//		06/05/28 ver 0.3a: 6x6 Hamiltonian by Chao and Chuang is added, a bug in OSHamiltonian is fixed.//		08/11/20 ver 0.3a1: bug fixed in // direct diagonalization of 6x6 matrixMacro OSHamiltonian_Eigv(wv,hhos,th,av,bb,dd,delta,sw)	String wv,hhos,sw	Variable th,av,bb,dd,delta	PauseUpdate;Silent 1		Variable pp,qq	Variable/C rr,ss//	pp=p_epsilon(av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	pp=0	qq=q_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	rr=r_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	ss=s_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	//	Make/O/D/N=$hos	OSHamiltonian6x6_CC(hhos,0,qq,rr,ss,delta)	MatrixEigenV/R $hhos//	W_eigenvalues+=0EndMacro OSHamiltonian_Eigv0(wv,hhos,th,av,bb,dd,delta,sw)	String wv,hhos,sw	Variable th,av,bb,dd,delta	PauseUpdate;Silent 1		Variable pp,qq	Variable/C rr,ss//	pp=p_epsilon(av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	pp=0	qq=q_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	rr=r_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	ss=s_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	//	Make/O/D/N=$hos	OSHamiltonian(hhos,0,qq,rr,ss,delta)	MatrixEigenV/R $hhos//	W_eigenvalues+=0End// Calculate Eigenvalues of orbital-strain hamiltonian for given strain// following Chao and ChaoMacro OSHamiltonian_Eigv_cc(wv,th,av,bb,dd,delta,sw)	String wv,sw	Variable th,av,bb,dd,delta	PauseUpdate;Silent 1		Variable pp,qq	Variable/C rr,ss	Variable ee,lambda,mu		pp=p_epsilon(av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	qq=q_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	rr=r_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])	ss=s_epsilon_th(th,av,bb,dd,$sw[0],$sw[1],$sw[2],$sw[3],$sw[4],$sw[5])//	print pp,qq,rr,ss	lambda=qq^2+cabs(ss)^2+cabs(rr)^2	mu=2*qq^3+3*qq*cabs(ss)^2-6*qq*cabs(rr)^2+3*sqrt(3)*real(ss^2*conj(rr))	Make/D/O PolyCoefsOS={-mu-lambda*delta,-3*lambda,delta,1}//	Make /D/O PWaveOS//	SetScale/I x,-delta*2,delta,PWaveOS//	PWaveOS=Poly(PolyCoefsOS,x)	FindRoots/P=PolyCoefsOS// note: in the model solid theory shift with respect to volume change (p term) is considered in // Ev_avr, and thus I do not subtract here//	$wv=real(W_polyRoots-pp)+delta/3	$wv=real(W_polyRoots)+delta/3	$wv[3]=-100 // modified to sort correctly	Sort/R $wv,$wvEndFunction/D p_epsilon(av,bb,dd,epsxx,epsyy,epszz,epsyz,epszx,epsxy)	Variable av,bb,dd,epsxx,epsyy,epszz,epsxy,epsyz,epszx	return (av*(epsxx+epsyy+epszz))EndFunction/D q_epsilon_th(th,av,bb,dd,epsxx,epsyy,epszz,epsyz,epszx,epsxy)	Variable th,av,bb,dd,epsxx,epsyy,epszz,epsxy,epsyz,epszx	Variable e1,e2,e3,e5	e1=((-7*bb )/32. - (3*Sqrt(3)*dd)/32. - (9*bb *Cos(4*th))/32. + (3*Sqrt(3)*dd*Cos(4*th))/32.)	e2=(-bb /8. - (Sqrt(3)*dd)/8. + (3*bb *Cos(2*th))/8. - (Sqrt(3)*dd*Cos(2*th))/8.) 	e3=((11*bb )/32. + (7*Sqrt(3)*dd)/32. - (3*bb *Cos(2*th))/8. + (Sqrt(3)*dd*Cos(2*th))/8. + (9*bb *Cos(4*th))/32. - (3*Sqrt(3)*dd*Cos(4*th))/32.)	e5=((-3*bb *Sin(2*th))/8. + (Sqrt(3)*dd*Sin(2*th))/8. + (9*bb *Sin(4*th))/16. - (3*Sqrt(3)*dd*Sin(4*th))/16.)//	e1=((-7*bb)/32. - (3*Sqrt(3)*dd)/16. - (9*bb*Cos(4*th))/32. + (3*Sqrt(3)*dd*Cos(4*th))/16.) //	e2=(-bb/8. - (Sqrt(3)*dd)/4. + (3*bb*Cos(2*th))/8. - (Sqrt(3)*dd*Cos(2*th))/4.) //	e3=((11*bb)/32. + (7*Sqrt(3)*dd)/16. - (3*bb*Cos(2*th))/8. + (Sqrt(3)*dd*Cos(2*th))/4. + (9*bb*Cos(4*th))/32. - (3*Sqrt(3)*dd*Cos(4*th))/16.) //	e5=((-3*bb*Sin(2*th))/16. + (Sqrt(3)*dd*Sin(2*th))/8. + (9*bb*Sin(4*th))/32. - (3*Sqrt(3)*dd*Sin(4*th))/16.)	return((e1*epsxx+e2*epsyy+e3*epszz+e5*epszx))EndFunction/C r_epsilon_th(th,av,bb,dd,epsxx,epsyy,epszz,epsyz,epszx,epsxy)	Variable th,av,bb,dd,epsxx,epsyy,epszz,epsxy,epsyz,epszx	Variable/C e1,e2,e3,e4,e5,e6		e1=((5*Sqrt(3)*bb)/32. + (11*dd)/32. + (Sqrt(3)*bb*Cos(2*th))/4. - (dd*Cos(2*th))/4. + (3*Sqrt(3)*bb*Cos(4*th))/32. - (3*dd*Cos(4*th))/32.) 	e2=(-(Sqrt(3)*bb)/8. - (3*dd)/8. - (Sqrt(3)*bb*Cos(2*th))/8. + (dd*Cos(2*th))/8.) 	e3=(-(Sqrt(3)*bb)/32. + dd/32. - (Sqrt(3)*bb*Cos(2*th))/8. + (dd*Cos(2*th))/8. - (3*Sqrt(3)*bb*Cos(4*th))/32. + (3*dd*Cos(4*th))/32.)	e4=(cmplx(0,-0.5)*Sqrt(3)*bb*Sin(2*th) + cmplx(0,0.5)*dd*Sin(2*th))	e5=((-3*Sqrt(3)*bb*Sin(2*th))/8. + (3*dd*Sin(2*th))/8. - (3*Sqrt(3)*bb*Sin(4*th))/16. + (3*dd*Sin(4*th))/16.)	e6=(cmplx(0,-0.5)*Sqrt(3)*bb - cmplx(0,0.5)*dd + cmplx(0,0.5)*Sqrt(3)*bb*Cos(2*th) - cmplx(0,0.5)*dd*Cos(2*th)) //	e1=((5*Sqrt(3)*bb)/32. + (11*dd)/16. + (Sqrt(3)*bb*Cos(2*th))/4. - (dd*Cos(2*th))/2. + (3*Sqrt(3)*bb*Cos(4*th))/32. - (3*dd*Cos(4*th))/16.) //	e2=(-(Sqrt(3)*bb)/8. - (3*dd)/4. - (Sqrt(3)*bb*Cos(2*th))/8. + (dd*Cos(2*th))/4.) //	e3=(-(Sqrt(3)*bb)/32. + dd/16. - (Sqrt(3)*bb*Cos(2*th))/8. + (dd*Cos(2*th))/4. - (3*Sqrt(3)*bb*Cos(4*th))/32. + (3*dd*Cos(4*th))/16.) //	e4=(cmplx(0,-0.25)*Sqrt(3)*bb*Sin(2*th) + cmplx(0,0.5)*dd*Sin(2*th)) //	e5=((-3*Sqrt(3)*bb*Sin(2*th))/16. + (3*dd*Sin(2*th))/8. - (3*Sqrt(3)*bb*Sin(4*th))/32. + (3*dd*Sin(4*th))/16.)//	e6=(cmplx(0,-0.25)*Sqrt(3)*bb - cmplx(0,0.5)*dd + cmplx(0,0.25)*Sqrt(3)*bb*Cos(2*th) - cmplx(0,0.5)*dd*Cos(2*th)) 	return((e1*epsxx+e2*epsyy+e3*epszz+e4*epsyz+e5*epszx+e6*epsxy))EndFunction/C s_epsilon_th(th,av,bb,dd,epsxx,epsyy,epszz,epsyz,epszx,epsxy)	Variable th,av,bb,dd,epsxx,epsyy,epszz,epsxy,epsyz,epszx	Variable/C e1,e2,e3,e4,e5,e6		e1=((Sqrt(3)*bb*Sin(2*th))/8. - (dd*Sin(2*th))/8. + (3*Sqrt(3)*bb*Sin(4*th))/16. - (3*dd*Sin(4*th))/16.)	e2=(-(Sqrt(3)*bb*Sin(2*th))/4. + (dd*Sin(2*th))/4.)	e3=((Sqrt(3)*bb*Sin(2*th))/8. - (dd*Sin(2*th))/8. - (3*Sqrt(3)*bb*Sin(4*th))/16. + (3*dd*Sin(4*th))/16.)	e4=(cmplx(0,0.5)*Sqrt(3)*bb + cmplx(0,0.5)*dd + cmplx(0,0.5)*Sqrt(3)*bb*Cos(2*th) - cmplx(0,0.5)*dd*Cos(2*th))	e5=((-3*Sqrt(3)*bb)/8. - (5*dd)/8. + (3*Sqrt(3)*bb*Cos(4*th))/8. - (3*dd*Cos(4*th))/8.)	e6=(cmplx(0,0.5)*Sqrt(3)*bb*Sin(2*th) - cmplx(0,0.5)*dd*Sin(2*th))//	e1=((Sqrt(3)*bb*Sin(2*th))/8. - (dd*Sin(2*th))/4. + (3*Sqrt(3)*bb*Sin(4*th))/16. - (3*dd*Sin(4*th))/8.) //	e2=(-(Sqrt(3)*bb*Sin(2*th))/4. + (dd*Sin(2*th))/2.) //	e3=((Sqrt(3)*bb*Sin(2*th))/8. - (dd*Sin(2*th))/4. - (3*Sqrt(3)*bb*Sin(4*th))/16. + (3*dd*Sin(4*th))/8.)//	e4=(cmplx(0,0.25)*Sqrt(3)*bb + cmplx(0,0.5)*dd + cmplx(0,0.25)*Sqrt(3)*bb*Cos(2*th) - cmplx(0,0.5)*dd*Cos(2*th)) //	e5=((-3*Sqrt(3)*bb)/16. - (5*dd)/8. + (3*Sqrt(3)*bb*Cos(4*th))/16. - (3*dd*Cos(4*th))/8.) //	e6=(cmplx(0,0.25)*Sqrt(3)*bb*Sin(2*th) - cmplx(0,0.5)*dd*Sin(2*th)) 	return((e1*epsxx+e2*epsyy+e3*epszz+e4*epsyz+e5*epszx+e6*epsxy))End// 6x6 Orbital-Strain HamiltonianProc OSHamiltonian(hhos,pp,qq,rr,ss,delta)	String hhos	Variable pp,qq,delta	Variable/C rr,ss	PauseUpdate; Silent 1		$hhos[0][0]=-pp-qq+delta/3	$hhos[0][1]=ss	$hhos[0][2]=-rr	$hhos[0][3]=0	$hhos[0][4]=ss/sqrt(2)	$hhos[0][5]=-rr*sqrt(2)	$hhos[1][0]=conj($hhos[0][1])	$hhos[1][1]=-pp+qq+delta/3	$hhos[1][2]=0	$hhos[1][3]=-rr	$hhos[1][4]=sqrt(2)*qq	$hhos[1][5]=-sqrt(3/2)*ss	$hhos[2][0]=conj($hhos[0][2])	$hhos[2][1]=0	$hhos[2][2]=-pp+qq+delta/3	$hhos[2][3]=-ss	$hhos[2][4]=-sqrt(3/2)*conj(ss)	$hhos[2][5]=-sqrt(2)*qq	$hhos[3][0]=0	$hhos[3][1]=conj($hhos[1][3])	$hhos[3][2]=conj($hhos[2][3])	$hhos[3][3]=-pp-qq+delta/3	$hhos[3][4]=sqrt(2)*conj(rr)	$hhos[3][5]=conj(ss)/sqrt(2)	$hhos[4][0]=conj($hhos[0][4])	$hhos[4][1]=conj($hhos[1][4])	$hhos[4][2]=conj($hhos[2][4])	$hhos[4][3]=conj($hhos[3][4])	$hhos[4][4]=-pp-2*delta/3	$hhos[4][5]=0	$hhos[5][0]=conj($hhos[0][5])	$hhos[5][1]=conj($hhos[1][5])	$hhos[5][2]=conj($hhos[2][5])	$hhos[5][3]=conj($hhos[3][5])	$hhos[5][4]=0	$hhos[5][5]=-pp-2*delta/3End// 6x6 Orbital-Strain HamiltonianProc OSHamiltonian6x6_CC(hhos,pp,qq,rr,ss,delta)	String hhos	Variable pp,qq,delta	Variable/C rr,ss	PauseUpdate; Silent 1	$hhos[0][0]=-pp-qq+delta/3	$hhos[0][1]=rr*sqrt(3.)	$hhos[0][2]=ss*(-sqrt(3./2.))	$hhos[0][3]=0	$hhos[0][4]=0	$hhos[0][5]=0	$hhos[1][0]=conj($hhos[0][1])	$hhos[1][1]=-pp-qq-delta/3	$hhos[1][2]=conj(ss)*(-sqrt(3./2.))	$hhos[1][3]=0	$hhos[1][4]=0	$hhos[1][5]=sqrt(2.)/3*delta	$hhos[2][0]=conj($hhos[0][2])	$hhos[2][1]=conj($hhos[1][2])	$hhos[2][2]=-pp+2*qq	$hhos[2][3]=0	$hhos[2][4]=-sqrt(2.)*delta/3	$hhos[2][5]=0	$hhos[3][0]=0	$hhos[3][1]=0	$hhos[3][2]=0	$hhos[3][3]=-pp-qq+delta/3	$hhos[3][4]=conj(rr)*sqrt(3.)	$hhos[3][5]=conj(ss)*(-sqrt(3./2.))	$hhos[4][0]=conj($hhos[0][4])	$hhos[4][1]=conj($hhos[1][4])	$hhos[4][2]=conj($hhos[2][4])	$hhos[4][3]=conj($hhos[3][4])	$hhos[4][4]=-pp-qq-delta/3	$hhos[4][5]=ss*(-sqrt(3./2.))	$hhos[5][0]=conj($hhos[0][5])	$hhos[5][1]=conj($hhos[1][5])	$hhos[5][2]=conj($hhos[2][5])	$hhos[5][3]=conj($hhos[3][5])	$hhos[5][4]=conj($hhos[4][5])	$hhos[5][5]=-pp+2*qqEnd// some functions for biaxial strain// calculate strain tensor for biaxial strainProc Strain_Biaxial(sw,epsxx,dd_eps,gg_eps)	String sw	Variable epsxx,dd_eps,gg_eps	PauseUpdate;Silent 1		$sw[0]=epsxx	$sw[1]=epsxx	$sw[2]=-epsxx*dd_eps	$sw[3]=0	$sw[4]=epsxx*gg_eps	$sw[5]=0End// dd_cubic = -epsilon_zz/epsilon_xx : for cubic crystal, biaxial strainFunction/D dd_cubic(th,c11,c12,c44)	Variable th,c11,c12,c44	Variable a1,a2	a1=(-2*c11^2-2*c11*c12+4*c12^2+c11*c44-21*c12*c44+6*c44^2-4*(c11-c12-2*c44)*c44*Cos(2*th)+(2*c11^2+2*c11*c12-4*c12^2-5*c11*c44-7*c12*c44+2*c44^2)*Cos(4*th))	a2=(-c11^2-c11*c12+2*c12^2-11*c11*c44+c12*c44-6*c44^2+4*(c11-c12-2*c44)*c44*Cos(2*th)+(c11^2+c11*c12-2*c12^2-c11*c44-5*c12*c44-2*c44^2)*Cos(4*th))	return (a1/a2)End// gg_cubic = epsilon_zx/epxilon_xx : for cubic crytal, biaxial strainFunction gg_cubic(th,c11,c12,c44)	Variable/D th,c11,c12,c44	Variable/D a1,a2	a1=(c11+2*c12)*(c11-c12-2*c44)*(2*Sin(2*th)-3*Sin(4*th))	a2=(-c11^2-c11*c12+2*c12^2-11*c11*c44+c12*c44-6*c44^2+4*(c11-c12-2*c44)*c44*Cos(2*th)+(c11^2+c11*c12-2*c12^2-c11*c44-5*c12*c44-2*c44^2)*Cos(4*th))	return(a1/a2/2)End////////////////////////////////// in some particular directions// (111)-directions//	pp=-av*(epsxx+epsyy+epszz)//	qq=-d/sqrt(3)*(epsxx+epsyy-2*epszz)//	rr=1/6*((sqrt(3)*b+4*d)*(epsxx-epsyy-cmplx(0,1)*epsxy)-sqrt(2)*(sqrt(3)*b-2*d)*(cmplx(0,1)*epsyz+epszx))//	ss=1/6*(sqrt(2)*(sqrt(3)*b-2*d)*(epsxx-epsyy+cmplx(0,1)*epsxy)+2*(sqrt(3)*b+d)*(cmplx(0,1)*epsyz-epszx))Function/D q_epsilon111(av,bb,dd,epsxx,epsyy,epszz,epsyz,epszx,epsxy)	Variable av,bb,dd,epsxx,epsyy,epszz,epsxy,epsyz,epszx	return(-((dd*(epsxx + epsyy - 2*epszz))/sqrt(3)))EndFunction/C r_epsilon111(av,bb,dd,epsxx,epsyy,epszz,epsyz,epszx,epsxy)	Variable/D av,bb,dd,epsxx,epsyy,epszz,epsxy,epsyz,epszx	return(1/6*((sqrt(3)*bb+4*dd)*(epsxx-epsyy-cmplx(0,1)*epsxy)-sqrt(2)*(sqrt(3)*bb-2*dd)*(cmplx(0,1)*epsyz+epszx)))EndFunction/C s_epsilon111(av,bb,dd,epsxx,epsyy,epszz,epsyz,epszx,epsxy)	Variable/D av,bb,dd,epsxx,epsyy,epszz,epsxy,epsyz,epszx	return(1/6*(sqrt(2)*(sqrt(3)*bb-2*dd)*(epsxx-epsyy+cmplx(0,1)*epsxy)+2*(sqrt(3)*bb+dd)*(cmplx(0,1)*epsyz-epszx)))End	