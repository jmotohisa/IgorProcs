#pragma rtGlobals=1		// Use modern global access method.// LoadReflectivity.ipf// by J. Motohisa// load single and multiple data saved by "reflectivityJM" program//// requires: "wname","MatrixOperations2" and "DataSetOperations"//		note: MatrixOperations2 requires "JEG Tools" (http://www.his.com/jguyer/)// 2012/04/05 ver 0.11: StrRpl becomes a separate function// 2005/02/25 ver 0.1: #include "StrRpl"#include "wname"#include "MatrixOperations2"#include "DataSetOperations"#include "GraphPlot"Macro LoadReflectivity(fileName,pathName,fwl,wantToDisp,convMat)	String fileName	String pathName="home"	Variable fwl=1,wantToDisp=2,convMat=1	Prompt fwl,"equale wavelength spacing ?",popup,"yes;no"	Prompt wantToDisp, "Do you want to display graphs?", popup, "Yes;No"	Prompt convMat, "Do you want to convert into Matrix?", popup, "Yes;No"	Silent 1; PauseUpDate	FLoadReflectivity(fileName,pathName,fwl,wantToDisp,convMat)EndFunction FLoadReflectivity(fileName,pathName,fwl,wantToDisp,convMat)		String fileName	String pathName	Variable fwl,wantToDisp,convMat	String dwname,xwname,ywname,destw,destwx,destw0,wnames,cmdstr,buffer	Variable ref,numdat=1	Variable index,index1,index2		if (strlen(fileName)<=0)		Open /D/R/P=$pathName/T=".DAT" ref		fileName= S_fileName		print filename	endif		LoadWave/G/D/N=$"dummy"/W/P=$pathName/Q fileName	if(V_flag==0)		return 0	endif//	print S_wavenames		destw0=strrpl(wname(fileName),"-","_")	index=0	index1=0	if(wantToDisp==1 %& convMat ==2)		Display /W=(3,41,636,476)	endif	do		dwname = StringFromList(index, S_waveNames)		if(strlen(dwname)==0)			break		endif		xwname=StringFromList(index+1,S_waveNames)		index2=0		wnames=""		do			if(index2==numdat)				break			endif			ywname=StringFromList(index+2+index2,S_waveNames)			wnames=wnames+","+ywname			index2+=1		while(1)		cmdstr="Sort "+xwname+","+xwname+wnames		Execute cmdstr		WaveStats/Q $xwname		index2=0		do			if(index2==numdat)				break			endif			ywname=StringFromList(index+2+index2,S_waveNames)			SetScale/I x,V_min*1e-9,V_max*1e-9,"m",$xwname,$ywname			SetScale y,0,1,"",$ywname			SetScale y,0,1,"m",$xwname			if(numdat==1)				if(fwl==1)					destw=destw0+"_"+num2istr(index1)					Duplicate/O $ywname,$destw				else					destwx=destw0+"_"+num2istr(index1)+"_0"					destw=destw0+"_"+num2istr(index1)+"_1"					Duplicate/O $xwname,$destwx					Duplicate/O $ywname,$destw				endif			else				if(fwl==1)					destw=destw0+"_"+num2istr(index2)+"_"+num2istr(index1)					Wave wdestw=$destw					Duplicate/O $ywname,wdestw				else					destwx=destw0+"_"+num2istr(index2)+"_"+num2istr(index1)+"_0"					destw=destw0+"_"+num2istr(index2)+"_"+num2istr(index1)+"_1"					Wave wdestw=$destw					Wave wdestwx=$destwx					Duplicate/O $xwname,wdestwx					Duplicate/O $ywname,wdestw				endif			endif			if(wantToDisp==1 %& convMat ==2)				if(fwl==1)					AppendToGraph $destw				else					AppendToGraph $destw vs $destwx				endif			endif			index2+=1		while(1)		index+=2+numdat		index1+=1	while(1)		if(wantToDisp==1 %& convMat ==2)		Legend/N=text0/F=0/A=MC/X=-38.04/Y=39.31		Label left "reflectivity (\\U)"		Label bottom "wavelength (\\U)"//		ColorWaves()	endif		if(convMat==1 %& numdat==1)		FWavesToMatrix(destw0+"_","","M"+destw0,0,index1,1) // dubugging insufficient		if(wantToDisp==1)			Display;AppendImage $("M"+destw0)		endif	endifEndMacro LoadReflectivityAll(pathName,fwl,wantToDisp,convmat)	String pathName="_New Path_"	Variable fwl=1,wantToDisp=1,convmat=2	Prompt pathName, "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	Prompt fwl,"equale wavelength spacing ?",popup,"yes;no"	Prompt wantToDisp, "Do you want to display graphs?", popup, "Yes;No"	Prompt convMat, "Do you want to convert into Matrix?", popup, "Yes;No"	Silent 1; PauseUpDate		String fileName,ftype	Variable index=0	ftype=".DAT"	if (CmpStr(PathName, "_New Path_") == 0)		// user selected new path ?		NewPath/O data			// this brings up dialog and creates or overwrites path		PathName = "data"	endif		do		fileName = IndexedFile($pathName, index,ftype)		if(strlen(fileName)==0)			break		endif		Print "loding file ",filename		FLoadReflectivity(fileName,pathName,fwl,wantToDisp,convmat)		index+=1	while(1)		if(Exists("temporaryPath"))		KillPath temporaryPath	endifEndMacro KillDummyWaves()	Silent 1;PauseUpdate	Variable index=0	String dummy	do		dummy="dummy"+num2istr(index)		if(waveExists($dummy)==0)			break		endif		KillWaves $dummy		index+=1	while(1)EndMacroMacro LoadReflectivityDSO(fileName,pathName,fwl,wantToDisp,convMat)	String fileName	String pathName="home"	Variable fwl=1,wantToDisp=2,convMat=1	Prompt fwl,"equale wavelength spacing ?",popup,"yes;no"	Prompt wantToDisp, "Do you want to display graphs?", popup, "Yes;No"	Prompt convMat, "Do you want to convert into Matrix?", popup, "Yes;No"	Silent 1; PauseUpDate//	FLoadReflectivityDSO(name,fileName,pathName,nmschm,which,fwl,convmat)EndFunction/S FLoadReflectivityDSO(name,fileName,pathName,fwl,convmat)		String name,fileName,pathName	Variable fwl,convMat	String dwname,xwname,ywname,destw,destwx,destw0,wnames,cmdstr,buffer,retstr		Variable ref,numdat=1,wnlength	Variable index,index1,index2	retstr=""		if (strlen(fileName)<=0)		Open /D/R/P=$pathName/T=".DAT" ref		fileName= S_fileName		print filename		if(strlen(name)<=0)			name=strrpl(wname(fileName),"-","_")			name=strrpl(name,",","_")		endif	endif		LoadWave/G/D/N=dummy/W/P=$pathName/Q fileName	if(V_flag==0)		return retstr	endif//	print S_wavenames		index=0	index1=0	do		dwname = StringFromList(index, S_waveNames)		if(strlen(dwname)==0)			break		endif		xwname=StringFromList(index+1,S_waveNames)		if(fwl==2)			Duplicate/O $xwname,dummyxwave0		endif				index2=0		wnames=""		do			if(index2==numdat)				break			endif			ywname=StringFromList(index+2+index2,S_waveNames)			Duplicate/O $ywname,dummyywave0			wnames=wnames+","+ywname			index2+=1		while(1)		cmdstr="Sort "+xwname+","+xwname+wnames		Execute cmdstr// wave base name		destw0=name		WaveStats/Q $xwname		index2=0		do			if(index2==numdat)				break			endif			ywname=StringFromList(index+2+index2,S_waveNames)			SetScale/I x,V_min*1e-9,V_max*1e-9,"m",$xwname,$ywname			SetScale y,0,1,"",$ywname			SetScale y,0,1,"m",$xwname			if(numdat==1)				retstr=retstr+destw0+";"				if(fwl==1)					destw=destw0					Duplicate/O $ywname,$destw				else					destwx=destw0+"_0"					destw=destw0+"_1"					Duplicate/O $xwname,$destwx					Duplicate/O $ywname,$destw				endif			else				retstr=retstr+destw0+"_"+num2istr(index2)+"_"+num2istr(index1)+";"				if(fwl==1)					destw=destw0+"_"+num2istr(index2)+"_"+num2istr(index1)					Wave wdestw=$destw					Duplicate/O $ywname,wdestw				else					destwx=destw0+"_"+num2istr(index2)+"_"+num2istr(index1)+"_0"					destw=destw0+"_"+num2istr(index2)+"_"+num2istr(index1)+"_1"					Wave wdestw=$destw					Wave wdestwx=$destwx					Duplicate/O $xwname,wdestwx					Duplicate/O $ywname,wdestw				endif			endif			index2+=1		while(1)		index+=2+numdat		index1+=1	while(1)		if(convMat==1 %& numdat==1)		FWavesToMatrix(destw0+"_","","M"+destw0,0,index1,1) // dubugging insufficient//		if(wantToDisp==1)//			Display;AppendImage $("M"+destw0)//		endif	endif		return retstrEndMacro LoadReflectivityDSOAll(thePath,nmschm,which,dsetnm,fwl,convmat)	String thePath="_New Path_",which="W",dsetnm="data"	Variable nmschm=-1,fwl=2,convmat=2	Prompt thePath, "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	Prompt nmschm,"wave naming scheme"	Prompt which,"wave prefix"	Prompt dsetnm, "prefix for dataset name"	Prompt fwl,"equale wavelength spacing ?",popup,"yes;no"	Prompt convMat, "Do you want to convert into Matrix?", popup, "Yes;No"	Silent 1; PauseUpDate		Variable/G g_DSOindex	FLoadReflectivityDSOAll(thePath,nmschm,which,dsetnm,fwl,convmat)EndFunction FLoadReflectivityDSOAll(thePath,nmschm,which,dsetnm,fwl,convmat)	String thePath,which,dsetnm	Variable nmschm,fwl,convmat		String fileName,ftype=".DAT"	Variable fileIndex=0	NVAR g_DSOindex	String name,nametmp	Variable wnlength,fileNum=0	String cmd	Variable index3		// create data set	FDSOinit0(dsetnm)	DSOCreate0(0,1)	dsetnm=dsetnm+num2istr(g_DSOindex-1)	Wave/T wdsetnm=$dsetnm	if(nmschm==0)		Make/T/N=1/O tmpnm	endif	if (CmpStr(thePath, "_New Path_") == 0)		// user selected new path ?		NewPath/O data			// this brings up dialog and creates or overwrites path		thePath = "data"	endif		if(fwl==2)		DoWindow /F Graphplotxy							// make sure Graphplot is front window		if (V_flag == 0)								// Graphplot does not exist?			Make/N=2/D/O dummyxwave0			Make/N=2/D/O dummyywave0			FGraphplotxy("wavelength","intensity")									// create it		endif	else		DoWindow /F Graphplot							// make sure Graphplot is front window		if (V_flag == 0)								// Graphplot does not exist?			Make/N=2/D/O dummywave0			FGraphplot("wavelength","intensity")									// create it		endif	endif// load reflectivity data	do		fileName = IndexedFile($thePath, fileIndex,ftype)		if(strlen(fileName)==0)			break		endif//		Print "loding file ",filename		nametmp=strrpl(wname(fileName),"-","_")		nametmp=strrpl(nametmp,",","_")		wnlength=strlen(nametmp)		if(nmschm==0)			Redimension/N=(fileIndex+1) tmpnm			tmpnm[fileIndex]=nametmp			name=which+num2istr(fileIndex)			print fileName,":",name		elseif (nmschm <0)			name=which+nametmp			print filename, ":",name		else // conventional naming scheme with			name=which+nametmp[wnlength-nmschm,wnlength-1]			print fileName		endif		name=FLoadReflectivityDSO(name,fileName,thePath,fwl,convmat)		index3=0		do			nametmp=StringFromList(index3,name)			if(strlen(nametmp)<=0)				break			endif			wdsetnm[fileNum]=nametmp			fileNum+=1			index3+=1		while(1)		fileIndex+=1	while(1)		if(Exists("temporaryPath"))		KillPath temporaryPath	endif		Redimension/N=(filenum) $dsetnm	DSODisplayTable(dsetnm)End