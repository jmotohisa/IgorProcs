#pragma rtGlobals=1		// Use modern global access method.// nextnano3procs.ipf  by J. Motohisa// version 0.1a // collection of procedures for displying data created by nextnano3 program// 06/11/28-06/11/29 version 0.1a : initial version//07/04/27 ver 0.1a1 : strrpl included//07/05/05 ver 0.1a2 : data load procedure modified// 09/09/17-18 ver 0.2: modified loaed procedure and 1D plot procedure#include "MatrixOperations2"#include "wname"#include "StrRpl"#include <AnnotationInfo Procs>// initializationMacro InitNXTNN3(thePath,num,fxgrid,fygrid,fzgrid)	String thePath="_New Path_"	Variable num=1,fxgrid=2,fygrid=2,fzgrid=2	Prompt thePath "Name of path containing text files", popup PathList("*", ";", "")+"_New Path_"	Prompt num,"directory suffix number"	Prompt fxgrid,"load x-grid data ?",popup,"yes;no"	Prompt fygrid,"load y-grid data ?",popup,"yes;no"	Prompt fzgrid,"load z-grid data ?",popup,"yes;no"	Silent 1;PauseUpdate		String wv,thePathStr,pathStr2	Variable/G g_num=num// assign path	if (CmpStr(thePath, "_New Path_") == 0)		// user selected new path ?		NewPath/O data			// this brings up dialog and creates or overwrites path		thePath = "data"	endif	PathInfo $thePath; thePathStr = S_path// load grid data	if(fxgrid==1)		LoadNXTNN3GridData1D(thePath,1,"x_grid.dat","xgrid")	endif	if(fygrid==1)		LoadNXTNN3GridData1D(thePath,1,"y_grid.dat","ygrid")	endif	if(fzgrid==1)		LoadNXTNN3GridData1D(thePath,1,"z_grid.dat","zgrid")	endif	// paths for data	PathStr2=thePathStr+"densities"+num2istr(num)+":"	NewPath/O p_densities,PathStr2	PathStr2=thePathStr+"band_struc"+num2istr(num)+":"	NewPath/O p_band_struc,PathStr2	PathStr2=thePathStr+"current"+num2istr(num)+":"	NewPath/O p_current,PathStr2End//////////////////////////////// 1D//////////////////////////////Macro LoadNXTNN3_1Dall(num,iugrid,wantToDisp)	Variable num=g_num,iugrid=2,wantToDisp=2	Prompt num,"directory suffix number"	Prompt iugrid,"uniform grid ?",popup,"yes;no"	Prompt wantToDisp, "Do you want to display graphs?", popup, "Yes;Append;No"	Silent 1; PauseUpDate		String orig// table for loaded file name	if(strlen(listmatch(WinList("*",";",""),"LoadedFileNameTable"))>0))		DoWindow/F LoadedFileNameTable	else		Edit		DoWindow/C LoadedFileNameTable	Endif	//	orig="band_struc"//	orig="densities"	LoadNXTNN3_path("band_struc",num,iugrid,wantToDisp)	LoadNXTNN3_path("densities",num,iugrid,wantToDisp)	LoadNXTNN3_path("current",num,iugrid,wantToDisp)End MacroProc LoadNXTNN3_path(orig,num,iugrid,wantToDisp)	String orig	Variable num=g_num,iugrid=2,wantToDisp=2	Prompt orig,"origin path name"	Prompt num,"suffix number"	Prompt iugrid,"uniform grid ?",popup,"yes;no"	Prompt wantToDisp, "Do you want to display graphs?", popup, "Yes;Append;No"	Silent 1; PauseUpDate		String pathName,basename	String w_fname,w_wname,gr_name	pathName="p_"+orig	w_fname="file_"+orig+num2istr(num)	w_wname="wave_"+orig+num2istr(num)	gr_name="graph_"+orig+num2istr(num)	PathInfo $pathName	if(V_flag==1)		basename=ParseFilePath(0, S_path, ":", 1, 0)		Make/T/N=1/O $w_fname,$w_wname		DoWindow/F LoadedFileNameTable		Append $w_fname,$w_wname		LoadNXTNN3DinFolder1D(pathName,basename,w_fname,w_wname,iugrid,wantToDisp,gr_name)	else		print "Load skipped because path ",pathName, " was not found."	endifEnd MacroProc LoadNXTNN3DinFolder1D(pathName,basename,w_fname,w_wname,iugrid,wantToDisp,gr_name)	String pathName="_New Path_",basename,grname,w_fname,w_wname,gr_name	Variable iugrid=2,wantToDisp=2	Prompt iugrid,"uniform grid ?",popup,"yes;no"	Prompt wantToDisp, "Do you want to display graphs?", popup, "Yes;Append;No"	Prompt gr_name,"graph name"	Silent 1; PauseUpDate		String fileName,ftype,basename2	Variable index=0,index2=0	if(CmpStr(IgorInfo(2), "Macintosh") == 0)//		ftype="TEXT"		ftype=".dat"	else		ftype=".dat"	endif	if (CmpStr(PathName, "_New Path_") == 0)		// user selected new path ?		NewPath/O data			// this brings up dialog and creates or overwrites path		PathName = "data"	endif		index=0	index2=0	do		fileName = IndexedFile($pathName, index,ftype)		if(strlen(fileName)==0)			break		endif		basename2=basename+"_"+num2istr(index2)		if(strsearch(FileName,"test.dat",0)<0) // skip "test.dat"			Redimension/N=(index2+1) $w_Fname,$w_wname			$w_fname[index2]=wname(filename)+ftype			$w_wname[index2]=basename2			Print "loding file ",filename			LoadNXTNN3_1D(fileName,pathName,basename2,iugrid,2,gr_name)			index2+=1		endif		index+=1	while(1)End Macro LoadNXTNN3_1D(fileName,pathName,basename,iugrid,wantToDisp,gr_name)	String fileName,pathName="",basename,gr_name	Variable iugrid=1,wantToDisp=1	Prompt fileName,"File name"	Prompt pathName,"Path Name"	Prompt baseName,"base wave name"	Prompt iugrid,"uniform grid ?",popup,"yes;no"	Prompt wantToDisp, "Do you want to display graphs?", popup, "Yes;Append;No"	Prompt gr_name,"graph name"	Silent 1; PauseUpDate		String xwname,xwname0,ywname,ywname0	Variable ref,index		if (strlen(fileName)<=0)		if(CmpStr(IgorInfo(2), "Macintosh") == 0)//			Open /D/R/P=$pathName/T="sGBWTEXT" ref // MacOS			Open /D/R/P=$pathName/T=".DAT" ref // windows		else			Open /D/R/P=$pathName/T=".DAT" ref // windows		endif		fileName= S_fileName		print filename	endif		LoadWave/G/D/N=$"dummy"/W/P=$pathName/Q fileName	if(V_flag==0)		return	endif//	print S_wavenames		if(strlen(basename)==0)		baseName=strrpl(wname(fileName),"-","_")	endif		if(wantToDisp==1)		Display /W=(3,41,636,476)	endif	if(wantToDisp==2 && strlen(gr_name)>0)		if(strlen(listmatch(WinList("*",";",""),gr_name))>0)			DoWindow/F $gr_name		else			Display /W=(3,41,636,476)			DoWindow/C $gr_name		endif	endif// 1st column : assumed to be axis data, unit in nm 	xwname0 = StringFromList(0,S_waveNames,";")	xwname = BaseName+"_x"	Duplicate/O $xwname0,$xwname	$xwname *=1e-9	WaveStats/Q $xwname	SetScale/I x,V_min,V_max,"m",$xwname	SetScale d 0,0,"m", $xwname	index=1	do		ywname0 = StringFromList(index,S_waveNames,";")		if(strlen(ywname0)==0)			break		endif		ywname = BaseName +"_y"+num2istr(index)		Duplicate/O $ywname0,$ywname		SetScale/I x,V_min,V_max,"m",$ywname		SetScale d 0,0,"eV", $ywname		if(wantToDisp==1||wantToDisp==2)			if(iugrid==1) // uniform grid				AppendToGraph $ywname			else				AppendToGraph $ywname vs $xwname			endif		endif		index+=1	while(1)		if(wantToDisp==1)		Legend/N=text0/F=0/A=MC/X=-38.04/Y=39.31		Label left "potential (\\U)"		Label bottom "position (\\U)"	endifEndMacro NextNanoPlot1D(suffix,num,index,xwvnm,ywvnm,iugrid,flag)	String suffix,xwvnm="x",ywvnm="y1"	Variable num=g_num,index=0,flag=1,iugrid=2	Prompt suffix,"suffix",popup,"band_struc;densities;current"	Prompt num,"directory suffix number"	Prompt index,"index"	Prompt xwvnm,"x wave #"	Prompt ywvnm,"y wave #"	Prompt iugrid,"uniform grid ?",popup,"yes;no"	Prompt flag,"display or append",popup,"display;append"		PauseUpdate;Silent 1		String xwave,ywave,w0=suffix+num2istr(num)	String annonstr,w_fname,infoStr	ywave=w0+"_"+num2istr(index)+"_"+ywvnm	w_fname="file_"+w0	annonstr="\\s("+ywave+") "+$w_fname[index]	if(strlen(xwvnm)!=0 || iugrid==2)		xwave=w0+"_"+num2istr(index)+"_"+xwvnm		if(flag==2)			AppendToGraph $ywave vs $xwave			if(strlen(Listmatch(AnnotationList(""),"text0"))>0)				infoStr= AnnotationInfo("", "text0",1)				annonstr=AnnotationText(infoStr)+"\r"+annonstr			endif		else			Display $ywave vs $xwave		endif	else		if(flag==2)			AppendToGraph $ywave			if(strlen(Listmatch(AnnotationList(""),"text0"))>0)				infoStr= AnnotationInfo("", "text0",1)				annonstr=AnnotationText(infoStr)+"\r"+annonstr			endif		else			Display $ywave		endif	endif	TextBox/C/N=text0/F=0/A=MC annonstrEndMacro NextNanoPlot1D_mul(suffix,num,istart,iend,xwvnm,ywvnm,iugrid,flag)	String suffix,xwvnm="x",ywvnm="y1"	Variable num=g_num,istart=0,iend=0,flag=1,iugrid=2	Prompt suffix,"suffix",popup,"band_struc;densities;current"	Prompt num,"directory suffix number"	Prompt istart,"starting index"	Prompt iend,"ending index"	Prompt xwvnm,"x wave #"	Prompt ywvnm,"y wave #"	Prompt iugrid,"uniform grid ?",popup,"yes;no"	Prompt flag,"display or append",popup,"display;append"		PauseUpdate;Silent 1		String xwave,ywave	Variable index=istart	ywave=suffix+"_"+num2istr(num)+"_"+ywvnm	if(flag==1)		Display	endif	do		NextNanoPlot1D(suffix,num,index,xwvnm,ywvnm,iugrid,2)		index+=1	while(index<=iend)End	//////////////////////////////// 2D//////////////////////////////Proc LoadNXTNN3GridDataStd(thePath)	String thePath="data"	Silent 1;PauseUpdate		LoadNXTNN3GridData1D(thePath,1,"x_grid.dat","xgrid")	LoadNXTNN3GridData1D(thePath,1,"y_grid.dat","ygrid")//	LoadNXTNN3GridData(thePath,1,"x_grid.dat","y_grid.dat","xgrid","ygrid)End ProcProc LoadNXTNN3GridData(thePath,iconv,fn_xgrid,fn_ygrid,wn_xgrid,wn_ygrid)	String thePath="data"	String fn_xgrid="x_grid.dat",fn_ygrid="y_grid.dat"	String wn_xgrid="xgrid",wn_ygrid="ygrid"	Variable iconv=1	prompt thePath,"Path for data folder"	Prompt iconv,"convert for nonlinear mesh ?",popup,"yes;no"	PauseUpdate;Silent 1		LoadNXTNN3GridData1D(thePath,iconv,fn_xgrid,wn_xgrid)	LoadNXTNN3GridData1D(thePath,iconv,fn_ygrid,wn_ygrid)End Macro// load grid data (1D)Proc LoadNXTNN3GridData1D(thePath,iconv,fn_grid,wn_grid)	String thePath="data"	String fn_grid,wn_grid	Variable iconv=2	prompt thePath,"Path for data folder"	Prompt iconv,"convert for nonlinear mesh ?",popup,"yes;no"	PauseUpdate;Silent 1		String wv// load grid data (2D)	LoadWave/G/D/N=dummy/P=$thePath fn_grid	wv = StringFromList(0,S_waveNames,";")	if(iconv==1)		convertNLmesh(wv,wn_grid)	else		Duplicate/O $wv $wn_grid	endif	KillWaves $wvEnd ProcProc convertNLmesh(orig,dest)	String orig,dest	PauseUpdate;Silent 1		Variable i,nsize	Duplicate/O $orig,$dest	nsize = DimSize($orig,0)	Redimension/N=(nsize+1) $dest		i=0	$dest[i]=$orig[0]-($orig[1]-$orig[0])/2	do		i+=1		$dest[i]=($orig[i]+$orig[i-1])/2	while(i<nsize-1)	$dest[nsize]=$orig[nsize-1]+($orig[nsize-1]-$orig[nsize-2])/2End Proc////////// load data//assmue that .dat are converted using perl script "avs2igor.pl" (plotted using standard grid data) // or "avs2igor2.pl" (grid data is also generated and loaded)Macro LoadNXTNN3_2D(wvname,filename,pathname,igrid)	String wvname,filename,pathname	Variable igrid=1	Prompt pathname "Name of path containing text files"	Prompt igrid,"Load grid data ?",popup,"yes;no"	PauseUpdate;Silent 1		String fn_xgrid,fn_ygrid,wn_xgrid,wn_ygrid	String fname0,pname0// load data		LoadMatrixWave(wvname,filename,pathname,2,2,1)		if(strlen(wvname)==0)		wvname=g_wvname	endif	if(strlen(pathname)==0)		pathname=g_pathname	endif	if(strlen(filename)==0)		filename=g_filename	endif	if(igrid==1)		fname0=StringFromList(ItemsInList(filename,":")-1,filename,":")		pname0=RemoveFromList(fname0,filename,":")//	print pname0//	print fname0		NewPath/O temppath,pname0		fn_xgrid=wname(fname0)+".x.txt"		fn_ygrid=wname(fname0)+".y.txt"//	print fn_xgrid,fn_ygrid		wn_xgrid="xgrid_"+wname(fname0)		wn_ygrid="ygrid_"+wname(fname0)		LoadNXTNN3GridData("temppath",2,fn_xgrid,fn_ygrid,wn_xgrid,wn_ygrid)	else	// standard grid data is used		wn_xgrid="xgrid"		wn_ygrid="ygrid"	endif	Display2Dimage(wvname,wn_xgrid,wn_ygrid)EndMacro display2Dimage(wname,wn_xgrid,wn_ygrid)	String wname,wn_xgrid="xgrid",wn_ygrid="ygrid"	Prompt wname,"Wave name for Image plot",popup,WaveList("*",";","DIMS:2")	PauseUpdate;Silent 1		Variable sizex,sizey	sizex=DimSize($wname,0)	sizey=DimSize($wname,1)	if(sizex==DimSize($wn_xgrid,0)-1 && sizey==DimSize($wn_ygrid,0)-1)		Display;AppendImage $wname vs {$wn_xgrid,$wn_ygrid}	else		print "Warning: Mismatch in axis waves number of points - ignoring axis wave"		print sizex,DimSize($wn_xgrid,0),sizey,DimSize($wn_ygrid,0)		Display;AppendImage $wname	endif	ModifyGraph height={Aspect,1}End//////// added on 09/09/17//Macro NextNano3Load(fname,num)//	String fname//	Variable num=1//	Prompt fname,"name",popup,"band_struc;densities;current"//	PauseUpdate;Silent 1//	//	String name//	name=fname+num2istr(num)//	MultiLoadGeneralTextData("_New Path_","dat",name,"data",name,2,1,2)//End