#pragma rtGlobals=1		// Use modern global access method.#include "PhysicalConstants"#include "MaterialParameters"#include "MatrixOperations2"// FETmodel.ipf//// Some Procedure to calculate Ids for various kind of FET structures// in gradual channel approximation////	09/11/08 ver. 0.1a by J. Motohisa////	revision history//		13/02/13 ver 0.3a: added additional threshold shift (gate voltage offset) in part of macros//		09/11/08 ver 0.2a: added calculation for charge density for cylindrical MOSFET (DisplayChargeDensity)//								added some macros for Ids-Vgs and Ids-Vds fo c-MOSFET, //								with source and drain resistance //		08/05/12 ver. 0.1a: first version; cyrindcical MESFET, cylindrical MOSFET// simple mosfetFunction VdsIds_MOS(wvname,Vdstart,Vdend,Vdstep,Vgs,beta0,Vth)	String wvname	Variable ,Vdstart,Vdend,Vdstep,Vgs,beta0,Vth		Variable nstep=(Vdend-Vdstart)/Vdstep+1	Make/O/N=(nstep) $wvname	Wave wv=$wvname	SetScale/P x Vdstart,Vdstep,$wvname	wv=Ids_MOS0(x,Vgs,beta0,vth)EndFunction Ids_MOS0(Vds,Vgs,beta0,Vth)	Variable Vds,Vgs,beta0,Vth	if(Vgs<Vth)		return(0)	Endif	if(Vds>Vgs-Vth)		return(beta0*(Vgs-Vth)*(Vgs-Vth)/2)	else		return(beta0*((Vgs-Vth)*Vds-Vds*Vds/2))	endifEndFunction Ids_MOS1(Vds,Vgs,beta0,Vth,lambda0)	Variable Vds,Vgs,beta0,Vth,lambda0	if(Vds>Vgs-Vth)		return(beta0*(Vgs-Vth)*(Vgs-Vth)/2*(1+lambda0*Vds))	else		return(beta0*((Vgs-Vth)*Vds-(Vgs-Vth)*(Vgs-Vth)/2)*(1+lambda0*Vds))	endifEnd/////////////////////////// Cylyndrical MOSFET (Iniguez et al, Trans. ED)Proc init_cMOSFET()	PauseUpdate; Silent 1	init_PhysicalConstants()	Make/O/D/N=24 param_cMOSFET	Make/O/D/N=8 param_voltage	Make/O/D/N=4 param_withR		SetDimLabel 0,0,'Vth',param_cMOSFET	SetDimLabel 0,1,'Cox',param_cMOSFET	SetDimLabel 0,2,'Q0',param_cMOSFET	SetDimLabel 0,3,'ni',param_cMOSFET	SetDimLabel 0,4,'delta',param_cMOSFET	SetDimLabel 0,5,'V0',param_cMOSFET		SetDimLabel 0,6,'temp',param_cMOSFET		SetDimLabel 0,7,'radius',param_cMOSFET//	SetDimLabel 0,8,'Cox',param_cMOSFET	SetDimLabel 0,9,'eps_ox',param_cMOSFET	SetDimLabel 0,10,'tox',param_cMOSFET	SetDimLabel 0,11,'dphi',param_cMOSFET	SetDimLabel 0,12,'me_dos',param_cMOSFET	SetDimLabel 0,13,'mh_dos',param_cMOSFET	SetDimLabel 0,14,'Eg',param_cMOSFET	SetDimLabel 0,15,'eps_semi',param_cMOSFET	SetDimLabel 0,16,'gv_e',param_cMOSFET	SetDimLabel 0,17,'K',param_cMOSFET	SetDimLabel 0,18,'mue',param_cMOSFET	SetDimLabel 0,19,'Vgs',param_cMOSFET	SetDimLabel 0,20,'V',param_cMOSFET	SetDimLabel 0,21,'Lg',param_cMOSFET	SetDimLabel 0,22,'Vth0',param_cMOSFET	SetDimLabel 0,23,'Vgs0',param_cMOSFET	SetDimLabel 0,0,'Vgs',param_voltage	SetDimLabel 0,1,'V',param_voltage	SetDimLabel 0,2,'Vds_start',param_voltage	SetDimLabel 0,3,'Vds_stop',param_voltage	SetDimLabel 0,4,'Vds_step',param_voltage	SetDimLabel 0,5,'Vgs_start',param_voltage	SetDimLabel 0,6,'Vgs_stop',param_voltage	SetDimLabel 0,7,'Vgs_step',param_voltageEnd ProcProc recalc_params_cMOSFET()	PauseUpdate;Silent 1	// temp, eps_semi, dphi,Cox and ni should be calculated before calling this proc	param_cMOSFET[%'Vth']=param_cMOSFET[%'temp']*g_KBC/g_EC//	param_cMOSFET[%'Cox'] = eps_ox*g_Epsilon/(radius*ln(1+tox/radius))	param_cMOSFET[%'Q0']=4*param_cMOSFET[%'eps_semi']*g_EPSILON/param_cMOSFET[%'radius']*param_cMOSFET[%'Vth']//	param_cMOSFET[%'ni'] = n_intrinsic(temperature,me,mh,Eg,6)	param_cMOSFET[%'delta']=(g_EC*param_cMOSFET[%'ni']/(param_cMOSFET[%'KBT']*(param_cMOSFET[%'eps_semi']*g_EPSILON)))	param_cMOSFET[%'V0']= (param_cMOSFET[%'dphi'] + param_cMOSFET[%'Vth']*ln(8/(param_cMOSFET[%'delta']*param_cMOSFET[%'radius']^2)))	param_cMOSFET[%'K'] = 2*pi * param_cMOSFET[%'radius']/param_cMOSFET[%'Lg'] *param_cMOSFET[%'mue']End ProcMacro SetParams_cMOSFET(radius,Lg,Cox,mue,ni,temp,eps_semi,dphi)	Variable radius=50,Lg=1,Cox=1e10,mue=400,ni=1.45e10,temp=300,eps_semi=11.9,dphi=0	Prompt radius,"nanowire radius (nm)"	Prompt Lg,"Gate Legth (micron)"	Prompt Cox, "Oxide capacitance (pF/m2)"	Prompt mue,"mobility (cm2/Vs)"	Prompt ni,"intrinsic carrier conc. (cm-3)"	Prompt temp,"temperature (K)"	Prompt eps_semi,"dielectric constant"	Prompt dphi,"work function difference"	PauseUpdate;Silent 1	//	if(WaveExists(param_cMOSFET))	init_cMOSFET()	SetParams_bias(0,1,-0.5,1)	param_cMOSFET[%'temp']=temp	param_cMOSFET[%'radius']=radius*1e-9	param_cMOSFET[%'Lg']=Lg*1e-6	param_cMOSFET[%'Cox']=Cox*1e-12	param_cMOSFET[%'mue']=mue*1e-4	param_cMOSFET[%'ni']=ni*1e6	param_cMOSFET[%'eps_semi']=eps_semi	param_cMOSFET[%'dphi'] = dphi	recalc_params_cMOSFET()End MacroMacro SetParams_bias(vds_start,vds_stop,vgs_start,vgs_stop)	Variable vds_start=0,vds_stop=1,vgs_start=-0.5,vgs_stop=1	Prompt vds_start,"Vds start"	Prompt vds_stop,"Vds stop"	Prompt vgs_start,"Vgs start"	Prompt vgs_stop,"Vgs stop"	PauseUpdate;Silent 1		param_voltage[%'vds_start']=vds_start	param_voltage[%'vds_stop']=vds_stop	param_voltage[%'vgs_start']=vgs_start	param_voltage[%'vgs_stop']=vgs_stopEnd Macro// intrinsic carrier concentrationMacro SetParams1_cMESFET(flg,ni,temp,me,mh,Eg,gv)	Variable flg=1,ni=1.48e10,temp=300,me,mh,Eg,gv=6	Prompt flg,"Calculate ni",popup,"yes;no"	Prompt ni,"intrinsic carrier concentration (cm^-3)"	Prompt temp,"temperature (K)"	Prompt me,"DOS effective mass of CB (m0)"	Prompt me,"DOS effective mass of VB (m0)"	Prompt Eg,"Bandgap (eV)"	Prompt gv,"valley degeneracy (CB)"	PauseUpdate;Silent 1		param_cMOSFET[%'me_dos']=me	param_cMOSFET[%'mh_dos']=mh	param_cMOSFET[%'Eg']=Eg	param_cMOSFET[%'gv_e']=gv	if(flg==1)		ni=n_intrinsic(temp,me,mh,Eg,gv)	else		ni=ni*1e6	endif	param_cMOSFET[%'ni']=ni	recalc_params_cMOSFET()End Macro// gate capacitance of surrouding-gate cyrlindrical MOSFET per unit areaMacro SetParams2_cMESFET(flg,Cox,radius,tox,eps_ox)	Variable flg=1,Cox=1e10,radius=50,tox=1.5,eps_ox=3.9	Prompt flg,"Calculate Cox",popup,"yes;no"	Prompt Cox,"gate capacitance (pF/m^2)"	Prompt radius,"nanowire radius (nm)"	Prompt tox,"oxide thickness (nm)"	Prompt eps_ox,"dielectric const of oxide"	PauseUpdate;Silent 1		param_cMOSFET[%'radius']=radius*1e-9	param_cMOSFET[%'tox']=tox*1e-9	param_cMOSFET[%'eps_ox']=eps_ox	if(flg==1)		Cox = param_cMOSFET[%'eps_ox']*g_Epsilon/(param_cMOSFET[%'radius']*ln(1+param_cMOSFET[%'tox']/param_cMOSFET[%'radius']))	else		Cox = Cox*1e-12	endif	param_cMOSFET[%'Cox']=Cox	recalc_params_cMOSFET()End MacroProc param_Si_cMOSFET()	PauseUpdate;Silent 1	param_cMOSFET[%'me_dos'] = (0.98*0.19^2)^(1/3)	param_cMOSFET[%'mh_dos']=(0.168^(3/2)+0.498^(3/2))^(2/3)	param_cMOSFET[%'Eg']=1.12	param_cMOSFET[%'eps_semi'] = 11.9	param_cMOSFET[%'ni'] = 1.45e10 *1e6	param_cMOSFET[%'gv_e']=6//	Nc = 2.8e19 *1e6//	Nv = 1.04e19 *1e6End ProcProc param_Ge_cMOSFET()	PauseUpdate;Silent 1	param_cMOSFET[%'me_dos'] = (0.98*0.19^2)^(1/3)	param_cMOSFET[%'mh_dos']=(0.168^(3/2)+0.498^(3/2))^(2/3)	param_cMOSFET[%'Eg']=1.12	param_cMOSFET[%'eps_semi'] = 11.9	param_cMOSFET[%'ni'] = 1.45e10 *1e6	param_cMOSFET[%'gv_e']=6//	me = (1.64*0.082^2)^(1/3)//	mh=(0.48^(3/2)+0.288^(3/2))^(2/3)//	Eg=0.66//	eps_semi = 16.0//	ni = 2.4e13 *1e6//	Nc = 1.04e19 *1e6//	Nv = 6.0e18 *1e6End ProcProc param_GaAs_cMOSFET()	PauseUpdate;Silent 1	param_cMOSFET[%'me_dos'] =0.067	param_cMOSFET[%'mh_dos']=(0.0828^(3/2)+0.458^(3/2))^(2/3)	param_cMOSFET[%'Eg']=1.43	param_cMOSFET[%'eps_semi'] = 13.1	param_cMOSFET[%'ni'] = 2.1e6 *1e6	param_cMOSFET[%'gv_e']=1//	me = 0.067//	mh=(0.0828^(3/2)+0.458^(3/2))^(2/3)//	Eg=1.43//	eps_semi = 13.1//	ni = 2.1e6 *1e6 //@300K//	Nc = 4.7e17 *1e6//	Nv = 7.0e18 *1e6End ProcProc param_InAs_cMOSFET()	PauseUpdate;Silent 1	param_cMOSFET[%'me_dos'] = (0.98*0.19^2)^(1/3)	param_cMOSFET[%'mh_dos']=(0.168^(3/2)+0.498^(3/2))^(2/3)	param_cMOSFET[%'Eg']=0.354	param_cMOSFET[%'eps_semi'] = 15.15	param_cMOSFET[%'ni'] = 1e15 *1e6	param_cMOSFET[%'gv_e']=1//	Nc = 8.7e16 *1e6//	Nv = 6.6e18 *1e6End Proc// Calculate and display charge density as a function of Vgs, for V=0, unit in C/m^2Macro DisplayChargeDensity(voltage)	Variable voltage=0	PauseUpdate;Silent 1		Make/O/D q0,q1	SetScale/I x param_voltage[%'vgs_start'],param_voltage[%'vgs_stop'],"V", q1,q0	SetScale d 0,0,"C/m^2", q1,q0	q1=Q_approx(0,x)	q0=qroot0(0,x)	If(strlen(WinList("ChargeDensity",";",""))==0)		Display /W=(35,44,594,431) q0,q1		ModifyGraph gfSize=18		DoWindow/C ChargeDensity		ModifyGraph lstyle(q0)=2,rgb(q0)=(0,0,0),lstyle(q1)=0,rgb(q1)=(65535,0,0)		Legend/C/N=text0/J/F=0/A=MC "\\s(q0) numerical\r\\s(q1) analytic"	else		DoWindow/F ChargeDensity	EndifEnd Macro// approximate form of Q (eq.17 in Iniguez Trans. ED)Function/D Q_approx(V,Vgs)	Variable/D Vgs,V	Variable/D qp0,Vt0,dVt0	Wave param_cMOSFET	qp0 = q_approx0(V,Vgs,param_cMOSFET[%'V0'],0)	Vt0=param_cMOSFET[%'V0'] + 2*param_cMOSFET[%'Vth']*ln(1+qp0/param_cMOSFET[%'Q0'])	dVt0 = (2*param_cMOSFET[%'Cox']*param_cMOSFET[%'Vth']^2/param_cMOSFET[%'Q0'])*qp0/(param_cMOSFET[%'Q0']+qp0)	return(q_approx0(V,Vgs,Vt0,dVt0))End Function// unified approximated formula for Q (eq. 13 in Iniguez et al., Trans. ED)Function/D Q_approx0(V,Vgs,Vt,deltaVt)	Variable/D V,Vgs,Vt,deltaVt	Variable/D a,b	Wave param_cMOSFET	a=2*param_cMOSFET[%'Cox']*param_cMOSFET[%'Vth']*param_cMOSFET[%'Vth']/param_cMOSFET[%'Q0']	b=2*param_cMOSFET[%'Vth']*ln(1+exp((Vgs-Vt+deltaVt-V)/(2*param_cMOSFET[%'Vth'])))	return(param_cMOSFET[%'Cox']*(sqrt(a*a+b*b)-a))End Macro// for numerical solution of charge densityFunction qroot0(V,Vgs)	Variable V,Vgs	Variable low,high	Wave param_cMOSFET,param_voltage	NVAR g_EPSILON,g_EC	low=-20	high=1-low	param_voltage[%'Vgs']=Vgs	param_voltage[%'V']=V	FindRoots/Q/L=(low) qfunc_cMOSFET_logQ,param_voltage	return(10^V_root)End FunctionFunction/D qfunc_cMOSFET(wv,qq)	Variable qq	wave wv	Variable qqq1,qqq2	Wave param_cMOSFET	qqq1 = wv[0]-param_cMOSFET[%'dphi']-wv[1]-param_cMOSFET[%'Vth']*ln(8/(param_cMOSFET[%'delta']*param_cMOSFET[%'radius']^2))//	qqq1 = wv[%'Vgs']-param_cMOSFET[%'dphi']-wv[%'V']-param_cMOSFET[%'Vth']*ln(8/(param_cMOSFET[%'delta']*param_cMOSFET[%'radius']^2))	qqq2=- (qq/param_cMOSFET[%'Cox'] + param_cMOSFET[%'Vth']*(ln(qq/param_cMOSFET[%'Q0'])+ln(1+(qq/param_cMOSFET[%'Q0']))))	return(qqq1+qqq2)End FunctionFunction/D qfunc_cMOSFET_logQ(wv,qqlog)	Variable qqlog	wave wv	Variable qq,qqq1,qqq2	Wave param_cMOSFET	qq=10^qqlog	return(qfunc_cMOSFET(wv,qq))//	qqq1 = wv[0]-param_cMOSFET[%'dphi']-wv[1]-param_cMOSFET[%'Vth']*ln(8/(param_cMOSFET[%'delta']*param_cMOSFET[%'radius']^2))//	qqq1 = wv[%'Vgs']-param_cMOSFET[%'dphi']-wv[%'V']-param_cMOSFET[%'Vth']*ln(8/(param_cMOSFET[%'delta']*param_cMOSFET[%'radius']^2))//	qqq2=- (qq/param_cMOSFET[%'Cox'] + param_cMOSFET[%'Vth']*(ln(qq/param_cMOSFET[%'Q0'])+ln(1+(qq/param_cMOSFET[%'Q0']))))//	return(qqq1+qqq2)End Function// currentMacro VgsIds_cMOSFET(wvname,Vds)	String wvname	Variable Vds=1	PauseUpdate;Silent 1		Make/O/D $wvname	SetScale/I x param_voltage[%'vgs_start'],param_voltage[%'vgs_stop'],"V" $wvname	SetScale d 0,0,"A", $wvname	$wvname=Ids_cMOSFET(Vds,x)	Display $wvname	ModifyGraph gfSize=18	Label bottom "Gate Voltage (\\U)"	Label left "Drain Current (\\U)"EndMacro VdsIds_cMOSFET(wvname,Vgs,mode)	String wvname	Variable Vgs=1,mode=1	Prompt wvname,"wave name"	Prompt Vgs,"Gave Voltage"	Prompt mode,"new or append or update",popup,"new;append;update"		PauseUpdate;Silent 1		Make/O/D $wvname	SetScale/I x param_voltage[%'vds_start'],param_voltage[%'vds_stop'],"V" $wvname	SetScale d 0,0,"A", $wvname	$wvname=Ids_cMOSFET(x,Vgs)	if(mode==1)		Display $wvname		ModifyGraph gfSize=18		Label bottom "Drain Voltage (\\U)"		Label left "Drain Current (\\U)"	else		if(mode==2)			Append $wvname		endif	endifEndMacro VgsIds_cMOSFET_R(wvname,Vds,Vth0,mode,Rs,Rd)	String wvname	Variable Vds=1,Vth0,Rs=1e3,Rd=1e3,mode=3	Prompt wvname,"wave name"	Prompt Vds,"Drain Voltage"	Prompt Vth0,"Threshold Voltage (gate voltage offset)"	Prompt mode,"new or append or update",popup,"new;append;update"		PauseUpdate;Silent 1		Make/O/D $wvname	SetScale/I x param_voltage[%'vgs_start'],param_voltage[%'vgs_stop'],"V" $wvname	SetScale d 0,0,"A", $wvname	$wvname=Ids_cMOSFET_R(Vds-Vth0,x,Rs,Rd)	if(mode==1)		Display $wvname		ModifyGraph gfSize=18		Label bottom "Gate Voltage (\\U)"		Label left "Drain Current (\\U)"	else		if(mode==2)			Append $wvname		endif	endifEndMacro VdsIds_cMOSFET_R(wvname,Vgs,mode,Rs,Rd)	String wvname	Variable Vgs=1,mode=1,Rs=1e3,Rd=1e3	Prompt wvname,"wave name"	Prompt Vgs,"Gate Voltage"	Prompt mode,"new or append or update",popup,"new;append;update"	PauseUpdate;Silent 1		Make/O/D $wvname	SetScale/I x param_voltage[%'vds_start'],param_voltage[%'vds_stop'],"V" $wvname	SetScale d 0,0,"A", $wvname	$wvname=Ids_cMOSFET_R(x,Vgs,Rs,Rd)	if(mode==1)		Display $wvname		ModifyGraph gfSize=18		Label bottom "Drain Voltage (\\U)"		Label left "Drain Current (\\U)"	else		if(mode==2)			Append $wvname		endif	endifEndMacro  VdsIdsmul_cMOSFET_R(wvname,Vgsstart,Vgsstop,Vgsstep,Vth0,mode,Rs,Rd)	String wvname	Variable Vgsstart=-2,Vgsstop=2,Vgsstep=1,Vth0=-0.7,mode=1,Rs=1e3,Rd=1e3	Prompt wvname,"wave name"	Prompt Vgsstart,"Gate Voltage start"	Prompt Vgsstop,"Gate Voltage stop"	Prompt Vgsstep,"Gate Voltage step"	Prompt Vth0,"Threshold voltage"	Prompt mode,"new or append or update",popup,"new;append;update"	PauseUpdate;Silent 1	Variable nstep=(Vgsstop-Vgsstart)/Vgsstep	String dummyIds=wvname+"_dummy"	Make/O/D/N=(128,nstep+1) $wvname	Make/O/D/N=(128) $dummyIds	SetScale/I x param_voltage[%'vds_start'],param_voltage[%'vds_stop'],"V" $wvname,$dummyIds	SetScale/I y Vgsstart,Vgsstop,"V" $wvname	SetScale d 0,0,"A", $wvname	Variable i=0,Vgs	do		Vgs=i*Vgsstep+Vgsstart-Vth0		$dummyIds=Ids_cMOSFET_R(x,Vgs,Rs,Rd)		$wvname[][i]=$dummyIds[p]		i+=1	while(i<=nstep)//	KillWaves $dummyIds		if(mode!=3)		MatrixWavePlot(wvname,mode,1,"_none_")	endifEndFunction Ids_cMOSFET_R(Vds,Vgs,RS,RD)	Variable Vds,Vgs,RS,RD	Wave param_withR	Wave W_Root	param_withR[0]=Vds	param_withR[1]=Vgs	param_withR[2]=Rs	param_withR[3]=Rd	FindRoots/Q fids1_cMOSFET,param_withR,fids2_cMOSFET,param_withR	Return(ids_cMOSFET(W_Root[0],W_Root[1]))//	print Vds,VgsEndFunction fIds1_cMOSFET(wv,Vds0,Vgs0)	Variable Vds0,Vgs0	Wave wv	return(wv[1]-wv[2]*Ids_cMOSFET(Vds0,Vgs0)- Vgs0)EndFunction fids2_cMOSFET(wv,Vds0,Vgs0)	Variable Vds0,Vgs0	Wave wv	Wave param_cMOSFET	return(wv[0]-(wv[2]+wv[3])*Ids_cMOSFET(Vds0,Vgs0)- Vds0)EndFunction Ids_cMOSFET(Vds,Vgs)	Variable Vds,Vgs	Wave param_cMOSFET	return(ids0_cMOSFET(Vds,Vgs)*param_cMOSFET[%'K'])End FunctionFunction Ids0_cMOSFET(Vds,Vgs)	Variable Vgs,Vds	Variable QS,QD	QS = Q_approx(0,Vgs)	QD = Q_approx(Vds,Vgs)	return(Ids00_cMOSFET(QS,QD))End FunctionFunction Ids00_cMOSFET(QS,QD)	Variable QS,QD	Variable ids1,ids2	Wave param_cMOSFET	ids1 = 2*param_cMOSFET[%'Vth']*(QS-QD)+(QS^2-QD^2)/param_cMOSFET[%'Cox']	ids2 = param_cMOSFET[%'Vth']*param_cMOSFET[%'Q0']*ln((QD+param_cMOSFET[%'Q0'])/(QS+param_cMOSFET[%'Q0']))	return(ids1+ids2)End FunctionMacro DisplayQprime(Vgs)	Variable Vgs	PauseUpdate;Silent 1	Make/D/O qprime	SetScale/I x,-1,1,"V",qprime//	qprime = q_approx0(Vgs,x,param_cMOSFET[%'V0'],0)	qprime = q_approx(Vgs,x)	Display qprimeEnd Macro// intrinsic carrier concentration// n_i = 2 (k_B T \over 2 \pi \hbar^2)^{3/2} (m_e m_h)^{3/4} \exp(-E_g/2 k_B T)// temp: temperature (K)// me,mh: denstiy of states effective mass for electron and hole) m_0// Eg : bandgap (eV)Function/D n_intrinsic(temp,me,mh,Eg,gv)	Variable/D temp,me,mh,Eg,gv	NVAR g_KBC,g_HBAR,g_MEL,g_EC	return(gv*2*sqrt(g_KBC*temp*g_MEL/(2*pi*g_HBAR*g_HBAR))^3*(me*mh)^(3/4)*exp(-Eg*g_EC/(2*g_KBC*temp)))End function/////////////////////////// Cylyndrical MESFETProc init_cMESFET()	PauseUpdate;Silent 1		init_PhysicalConstants()	Make/O/D/N=20 param_cMESFET	SetDimLabel 0,0,'radius',param_cMESFET	SetDimLabel 0,1,'Vbi',param_cMESFET	SetDimLabel 0,2,'eps_semi',param_cMESFET	SetDimLabel 0,3,'Nd',param_cMESFET	SetDimLabel 0,4,'Vx',param_cMESFET	SetDimLabel 0,5,'VbiV',param_cMESFET	SetDimLabel 0,6,'Vbi_r',param_cMESFET	SetDimLabel 0,7,'mue',param_cMESFET	SetDimLabel 0,8,'Lg',param_cMESFET	SetDimLabel 0,9,'K',param_cMESFET	SetDimLabel 0,10,'Vth',param_cMESFET	SetDimLabel 0,11,'K2',param_cMESFET	End ProcMacro SetParams_cMESFET(radius,Lg,Nd,Vbi,eps_semi,mue)	Variable radius=50,Lg=1,ND=2.3e18,Vbi=0.34,eps_semi=14.5,mue=400	Prompt radius,"nanowire radius (nm)"	Prompt Lg,"Gate Legth (micron)"	Prompt Nd,"Doping Density (cm^-3)"	Prompt Vbi,"Vbi (V)"	Prompt eps_semi,"Dielectric constant"	Prompt mue,"mobility (cm^2/Vs)"	PauseUpdate;Silent 1;	init_cMESFET()	param_cMESFET[%'Vbi']=Vbi	param_cMESFET[%'radius']=radius* 1e-9	param_cMESFET[%'eps_semi']=eps_semi	param_cMESFET[%'Nd']=Nd*1e6	param_cMESFET[%'mue']=mue*1e-4	param_cMESFET[%'Lg']=Lg*1e-6	param_cMESFET[%'K']=pi*g_EC^2*param_cMESFET[%'Nd']^2*param_cMESFET[%'mue']*param_cMESFET[%'radius']^4/(16*g_Epsilon*param_cMESFET[%'eps_semi']*param_cMESFET[%'Lg'])	param_cMESFET[%'Vth']=param_cMESFET[%'Vbi']-g_EC*param_cMESFET[%'Nd']*param_cMESFET[%'radius']^2/(4*g_EPSILON*param_cMESFET[%'eps_semi'])	param_cMESFET[%'K2']=pi*g_EC*param_cMESFET[%'Nd']*param_cMESFET[%'mue']*param_cMESFET[%'radius']^2/(param_cMESFET[%'Lg'])End MacroFunction Ids_cMESFET(Vds,Vgs)	Variable Vds,Vgs	Wave param_cMESFET	NVAR g_EC,g_EPSILON	return param_cMESFET[%'K']*ids0_cMESFET(Vds,Vgs)End MacroFunction Ids0_cMESFET(Vds,Vgs)	Variable Vds,Vgs	Variable r2d,r2s,d0,s0	wave param_cMESFET	r2d = r2root0(Vds,Vgs)	if(r2d ==0)		d0=0	else		d0 = r2d^2*(1-2*ln(r2d))	endif	if(Vgs>param_cMESFET[%'Vth'] && Vgs<param_cMESFET[%'Vbi'])		r2s = r2root0(0,Vgs)		s0=r2s^2*(1-2*ln(r2s))	else		if(Vgs < param_cMESFET[%'Vth'])			r2s =0			s0=0		else			r2s=1			s0=1		endif	Endif	return(s0-d0)End functionFunction gm_cMESFET(Vds,Vgs)	Variable Vds,Vgs	Wave param_cMESFET	return param_cMESFET[%'K2']*gm0_cMESFET(Vds,Vgs)End FunctionFunction gm0_cMESFET(Vds,Vgs)	Variable Vds,Vgs	Variable r2d,r2s	wave param_cMESFET	r2d = r2root0(Vds,Vgs)	if(Vgs>param_cMESFET[%'Vth'] && Vgs<param_cMESFET[%'Vbi'])		r2s = r2root0(0,Vgs)	else		if(Vgs < param_cMESFET[%'Vth'])			r2s =0		else			r2s=1		endif	Endif	return(r2s-r2d)End functionFunction r2root0(V,Vgs)	Variable V,vgs	Variable low,high	Wave param_cMESFET	NVAR g_EPSILON,g_EC	low=1e-6	high=1-low	param_cMESFET[%'Vx']=V	param_cMESFET[%'VbiV']=param_cMESFET[%'Vbi']-Vgs+V	param_cMESFET[%'Vbi_r'] = 4*(param_cMESFET[%'eps_semi']*g_EPSILON)/(g_EC*param_cMESFET[%'Nd']*param_cMESFET[%'radius']^2)*param_cMESFET[%'VbiV']	if(param_cMESFET[%'Vbi_r']>0 && param_cMESFET[%'Vbi_r']<1) // param_cMESFET<1 && 		FindRoots/Q/L=(low)/H=(high) r_cMESFET,param_cMESFET//	If(V_flag!=0)//		print V_flag//	Endif		Return (V_root)	else		if(param_cMESFET[%'Vbi_r']>1) // too large Vgs			return(0)		else			return(1)		endif	endifEnd FunctionFunction/D r_cMESFET (vv,r)	wave vv	Variable r	wave param_cMESFET	NVAR g_Epsilon,g_EC	Variable v0	v0 =4*(param_cMESFET[%'eps_semi']*g_EPSILON)/(g_EC*param_cMESFET[%'Nd']*param_cMESFET[%'radius']^2)*param_cMESFET[%'VbiV']	return(1-r+r*ln(r)-v0)End functionMacro Appendgm(grname,wvname)	String grname,wvname	PauseUpdate;Silent 1		String gmwv="gm_"+wvname	Duplicate/O $wvname,$gmwv	Differentiate $wvname/D=$gmwv	Append/R $gmwv	SetScale d 0,0,"S", $gmwvEnd