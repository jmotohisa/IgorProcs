#include <Strings as Lists>| load data for B-dependence dataMacro LoadVgIdData(fileName,pathName,index)	String fileName	String pathName	Variable index		Silent 1; PauseUpDate		String w0,w1,w2,w3,w4,w5,w6,w7	String w8		LoadWave/G/D/A/W/P=$pathName fileName	if(V_flag==0)		return	endif		w0 = GetStrFromList(S_waveNames,0,";")	w1 = GetStrFromList(S_waveNames,1,";")	w2 = GetStrFromList(S_waveNames,2,";")	w3 = GetStrFromList(S_waveNames,3,";")	w4 = GetStrFromList(S_waveNames,4,";")	w5 = GetStrFromList(S_waveNames,5,";")	w6 = GetStrFromList(S_waveNames,6,";")	w7 = GetStrFromList(S_waveNames,7,";")		KillWaves $w0,$w2,$w3,$w4,$w5,$w7	Sort $w1, $w1, $w6	WaveStats $w1	SetScale/I x,V_min,V_max,"V",$w6|	KillWaves $w0,$w3,$w4,$w5,$7|	Sort $w1, $w2, $w6|	WaveStats $w1|	SetScale/I x,V_min,V_max,"V",$w2,$w6	KillWaves $w1	w8 = "Id" + num2istr(index)	Rename $w6,$w8|	Display $w6EndMacro LoadAllVgIdData(pathName)	String pathName		Silent 1; PauseUpDate		String fileName	String w0,Vg,w2,w3,w4,Id	Variable index=0		if(strlen(pathName)==0)		NewPath/O temporaryPath		PathName = "temporaryPath"	endif		do		fileName = IndexedFile($pathName, index,"TEXT")		if(strlen(fileName)==0)			break		endif		LoadVgIdData(fileName,pathName,index)|		if(strlen(S_waveNames)>0)|		endif		index +=1	while(1)		if(Exists("temporaryPath"))		KillPath temporaryPath	endifEndMacro Calcgm(id,gm)	String id,gm	Silent 1; PauseUpDate		Duplicate $id,$gm	Differentiate $gmEndMacro CalcAllgm()	Silent 1; PauseUpDate		String Id, gm	Variable index=0		do		Id = "Id"+num2istr(index)		gm="gm"+num2istr(index)		if(exists(Id)!=1)			break		endif		Calcgm(Id,gm)		index +=1	while(1)End	Macro FindPeakB(field10)	Variable field10		Silent 1; PauseUpDate		String bWave	String pWave	Variable field	String cmmt		field=field10/10	bWave="Id"+num2istr(field10)	pWave="pk_"+num2istr(field10)	cmmt= "B=" + num2str(field) + "T;Vd=+0.1mV"	Display $bWave	InitializeMostEverything(bWave,"_Calculated_","_None_")	InitIdentifyPeaks(bWave,"_Calculated_","_None_",1,0.008,3)	AutoIdentifyPeaks(2,bWave,"_Calculated_","_None_",0.008,1)	MeasureIdentifiedPeaks(3,cmmt,"center",1,1)	Duplicate W_PkCenters $pWave	SetScale/P x field,1e-06,"", $pWave	DoWindow/F Graph0	AppendToGraph $pWave	ModifyGraph mode($pWave)=2,lsize($pWave)=2		PrintLayout PeakReportLayout	PrintGraphs PeakFitGraph	DoWindow/K PeakReportLayout	DoWindow/K PeakReportGraph	DoWindow/K PeakFitGraphEndMacro PeakCheck(field10)	Variable field10		Silent 1; PauseUpDate		String bWave	String pWave	Variable field	String cmmt		field=field10/10	bWave="Id"+num2istr(field10)	pWave="pk_"+num2istr(field10)	cmmt= "B=" + num2str(field) + "T;Vd=+0.1mV"	Display $bWave	InitializeMostEverything(bWave,"_Calculated_","_None_")	InitIdentifyPeaks(bWave,"_Calculated_","_None_",1,0.008,3)	AutoIdentifyPeaks(2,bWave,"_Calculated_","_None_",0.008,1)	MeasureIdentifiedPeaks(3,cmmt,"center",1,1)|	Duplicate W_PkCenters $pWave|	SetScale/P x field,1e-06,"", $pWave|	DoWindow/F Graph0|	AppendToGraph $pWave|	ModifyGraph mode($pWave)=2,lsize($pWave)=2		PrintLayout PeakReportLayout	DoWindow/F PeakFitGraph	RemoveFromGraph W_MinKnots	PrintGraphs/R PeakFitGraph(5,5,95,95)	DoWindow/K PeakReportLayout	DoWindow/K PeakReportTable	DoWindow/K PeakFitGraphEndMacro AutoYoffset(offs)	Variable offs=1		Silent 1; PauseUpDate	String w	Variable index=0		do		w=WaveName("",index,1)		if(exists(w)!=1)			break		endif		ModifyGraph offset($w)={0,offs*index}		index +=1	while(1)EndMacro SubstBaseline(w)	String w		Silent 1;PauseUpdate	String w1		w1=w+"NoBase"		display $w	InitializeMostEverything(w,"_Calculated_","_None_")	InitIdentifyPeaks(w,"_Calculated_","_None_",1,0.008,3)	AutoIdentifyPeaks(2,w,"_Calculated_","_None_",0.008,1)	ConstructBaselineFromPeaks(w,"_Calculated_","W_MinKnots")	SubtractBaseline(w,"_Calculated_","W_BaselineFit",w1)endMacro SubstBaselineAll()	variable index=0		Silent 1; PauseUpdate	String w		do		w="id"+num2istr(index)		if(exists(w)!=1)			break		endif		SubstBaseline(w)		DoWindow/K PeakFitGraph		index +=1	while(1)end		